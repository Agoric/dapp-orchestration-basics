diff --git a/dist/codegen/cosmos/base/abci/v1beta1/abci.d.ts b/dist/codegen/cosmos/base/abci/v1beta1/abci.d.ts
index ae6c5bc2022b221fad01fd08aee2a5ae68b62b06..962dcacac78f7bb2af9bb672c4836f116d213b0e 100644
--- a/dist/codegen/cosmos/base/abci/v1beta1/abci.d.ts
+++ b/dist/codegen/cosmos/base/abci/v1beta1/abci.d.ts
@@ -1,5 +1,5 @@
 import { Any, AnySDKType } from '../../../../google/protobuf/any.js';
-import { Event, EventSDKType } from '../../../../tendermint/abci/types.js';
+
 import { BinaryReader, BinaryWriter } from '../../../../binary.js';
 import { JsonSafe } from '../../../../json-safe.js';
 /**
diff --git a/dist/codegen/cosmos/base/abci/v1beta1/abci.js b/dist/codegen/cosmos/base/abci/v1beta1/abci.js
index ca41100043deae4dd6010998c6771a574af75b68..ecb2e9108f55bbe363f179aa0bc1e87657e7ee78 100644
--- a/dist/codegen/cosmos/base/abci/v1beta1/abci.js
+++ b/dist/codegen/cosmos/base/abci/v1beta1/abci.js
@@ -1,6 +1,6 @@
 //@ts-nocheck
 import { Any } from '../../../../google/protobuf/any.js';
-import { Event } from '../../../../tendermint/abci/types.js';
+
 import { BinaryReader, BinaryWriter } from '../../../../binary.js';
 import { isSet, bytesFromBase64, base64FromBytes, } from '../../../../helpers.js';
 function createBaseTxResponse() {
diff --git a/dist/codegen/icq/v1/packet.d.ts b/dist/codegen/icq/v1/packet.d.ts
index cd2978da0205bede663700db8af72cb932ec67a0..089ab88b6dae20cb63f753526efed263242a8e71 100644
--- a/dist/codegen/icq/v1/packet.d.ts
+++ b/dist/codegen/icq/v1/packet.d.ts
@@ -1,4 +1,4 @@
-import { RequestQuery, RequestQuerySDKType, ResponseQuery, ResponseQuerySDKType } from '../../tendermint/abci/types.js';
+
 import { BinaryReader, BinaryWriter } from '../../binary.js';
 import { JsonSafe } from '../../json-safe.js';
 /** InterchainQueryPacketData is comprised of raw query. */
diff --git a/dist/codegen/icq/v1/packet.js b/dist/codegen/icq/v1/packet.js
index 89438a4f801c3b14656c30124b0825909b168b4e..c4c33db652d829968fd77ed4ef08e36bde6b35a9 100644
--- a/dist/codegen/icq/v1/packet.js
+++ b/dist/codegen/icq/v1/packet.js
@@ -1,5 +1,5 @@
 //@ts-nocheck
-import { RequestQuery, ResponseQuery, } from '../../tendermint/abci/types.js';
+
 import { BinaryReader, BinaryWriter } from '../../binary.js';
 import { isSet, bytesFromBase64, base64FromBytes } from '../../helpers.js';
 function createBaseInterchainQueryPacketData() {
diff --git a/dist/codegen/tendermint/abci/types.d.ts b/dist/codegen/tendermint/abci/types.d.ts
deleted file mode 100644
index 901aff5a3b8f8695e7894d7d0a26a0294734f78f..0000000000000000000000000000000000000000
--- a/dist/codegen/tendermint/abci/types.d.ts
+++ /dev/null
@@ -1,1273 +0,0 @@
-import { Timestamp, TimestampSDKType } from '../../google/protobuf/timestamp.js';
-import { Header, HeaderSDKType } from '../types/types.js';
-import { ProofOps, ProofOpsSDKType } from '../crypto/proof.js';
-import { EvidenceParams, EvidenceParamsSDKType, ValidatorParams, ValidatorParamsSDKType, VersionParams, VersionParamsSDKType } from '../types/params.js';
-import { PublicKey, PublicKeySDKType } from '../crypto/keys.js';
-import { BinaryReader, BinaryWriter } from '../../binary.js';
-import { JsonSafe } from '../../json-safe.js';
-export declare enum CheckTxType {
-    NEW = 0,
-    RECHECK = 1,
-    UNRECOGNIZED = -1
-}
-export declare const CheckTxTypeSDKType: typeof CheckTxType;
-export declare function checkTxTypeFromJSON(object: any): CheckTxType;
-export declare function checkTxTypeToJSON(object: CheckTxType): string;
-export declare enum ResponseOfferSnapshot_Result {
-    /** UNKNOWN - Unknown result, abort all snapshot restoration */
-    UNKNOWN = 0,
-    /** ACCEPT - Snapshot accepted, apply chunks */
-    ACCEPT = 1,
-    /** ABORT - Abort all snapshot restoration */
-    ABORT = 2,
-    /** REJECT - Reject this specific snapshot, try others */
-    REJECT = 3,
-    /** REJECT_FORMAT - Reject all snapshots of this format, try others */
-    REJECT_FORMAT = 4,
-    /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */
-    REJECT_SENDER = 5,
-    UNRECOGNIZED = -1
-}
-export declare const ResponseOfferSnapshot_ResultSDKType: typeof ResponseOfferSnapshot_Result;
-export declare function responseOfferSnapshot_ResultFromJSON(object: any): ResponseOfferSnapshot_Result;
-export declare function responseOfferSnapshot_ResultToJSON(object: ResponseOfferSnapshot_Result): string;
-export declare enum ResponseApplySnapshotChunk_Result {
-    /** UNKNOWN - Unknown result, abort all snapshot restoration */
-    UNKNOWN = 0,
-    /** ACCEPT - Chunk successfully accepted */
-    ACCEPT = 1,
-    /** ABORT - Abort all snapshot restoration */
-    ABORT = 2,
-    /** RETRY - Retry chunk (combine with refetch and reject) */
-    RETRY = 3,
-    /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */
-    RETRY_SNAPSHOT = 4,
-    /** REJECT_SNAPSHOT - Reject this snapshot, try others */
-    REJECT_SNAPSHOT = 5,
-    UNRECOGNIZED = -1
-}
-export declare const ResponseApplySnapshotChunk_ResultSDKType: typeof ResponseApplySnapshotChunk_Result;
-export declare function responseApplySnapshotChunk_ResultFromJSON(object: any): ResponseApplySnapshotChunk_Result;
-export declare function responseApplySnapshotChunk_ResultToJSON(object: ResponseApplySnapshotChunk_Result): string;
-export declare enum EvidenceType {
-    UNKNOWN = 0,
-    DUPLICATE_VOTE = 1,
-    LIGHT_CLIENT_ATTACK = 2,
-    UNRECOGNIZED = -1
-}
-export declare const EvidenceTypeSDKType: typeof EvidenceType;
-export declare function evidenceTypeFromJSON(object: any): EvidenceType;
-export declare function evidenceTypeToJSON(object: EvidenceType): string;
-export interface Request {
-    echo?: RequestEcho;
-    flush?: RequestFlush;
-    info?: RequestInfo;
-    setOption?: RequestSetOption;
-    initChain?: RequestInitChain;
-    query?: RequestQuery;
-    beginBlock?: RequestBeginBlock;
-    checkTx?: RequestCheckTx;
-    deliverTx?: RequestDeliverTx;
-    endBlock?: RequestEndBlock;
-    commit?: RequestCommit;
-    listSnapshots?: RequestListSnapshots;
-    offerSnapshot?: RequestOfferSnapshot;
-    loadSnapshotChunk?: RequestLoadSnapshotChunk;
-    applySnapshotChunk?: RequestApplySnapshotChunk;
-}
-export interface RequestProtoMsg {
-    typeUrl: '/tendermint.abci.Request';
-    value: Uint8Array;
-}
-export interface RequestSDKType {
-    echo?: RequestEchoSDKType;
-    flush?: RequestFlushSDKType;
-    info?: RequestInfoSDKType;
-    set_option?: RequestSetOptionSDKType;
-    init_chain?: RequestInitChainSDKType;
-    query?: RequestQuerySDKType;
-    begin_block?: RequestBeginBlockSDKType;
-    check_tx?: RequestCheckTxSDKType;
-    deliver_tx?: RequestDeliverTxSDKType;
-    end_block?: RequestEndBlockSDKType;
-    commit?: RequestCommitSDKType;
-    list_snapshots?: RequestListSnapshotsSDKType;
-    offer_snapshot?: RequestOfferSnapshotSDKType;
-    load_snapshot_chunk?: RequestLoadSnapshotChunkSDKType;
-    apply_snapshot_chunk?: RequestApplySnapshotChunkSDKType;
-}
-export interface RequestEcho {
-    message: string;
-}
-export interface RequestEchoProtoMsg {
-    typeUrl: '/tendermint.abci.RequestEcho';
-    value: Uint8Array;
-}
-export interface RequestEchoSDKType {
-    message: string;
-}
-export interface RequestFlush {
-}
-export interface RequestFlushProtoMsg {
-    typeUrl: '/tendermint.abci.RequestFlush';
-    value: Uint8Array;
-}
-export interface RequestFlushSDKType {
-}
-export interface RequestInfo {
-    version: string;
-    blockVersion: bigint;
-    p2pVersion: bigint;
-}
-export interface RequestInfoProtoMsg {
-    typeUrl: '/tendermint.abci.RequestInfo';
-    value: Uint8Array;
-}
-export interface RequestInfoSDKType {
-    version: string;
-    block_version: bigint;
-    p2p_version: bigint;
-}
-/** nondeterministic */
-export interface RequestSetOption {
-    key: string;
-    value: string;
-}
-export interface RequestSetOptionProtoMsg {
-    typeUrl: '/tendermint.abci.RequestSetOption';
-    value: Uint8Array;
-}
-/** nondeterministic */
-export interface RequestSetOptionSDKType {
-    key: string;
-    value: string;
-}
-export interface RequestInitChain {
-    time: Timestamp;
-    chainId: string;
-    consensusParams?: ConsensusParams;
-    validators: ValidatorUpdate[];
-    appStateBytes: Uint8Array;
-    initialHeight: bigint;
-}
-export interface RequestInitChainProtoMsg {
-    typeUrl: '/tendermint.abci.RequestInitChain';
-    value: Uint8Array;
-}
-export interface RequestInitChainSDKType {
-    time: TimestampSDKType;
-    chain_id: string;
-    consensus_params?: ConsensusParamsSDKType;
-    validators: ValidatorUpdateSDKType[];
-    app_state_bytes: Uint8Array;
-    initial_height: bigint;
-}
-export interface RequestQuery {
-    data: Uint8Array;
-    path: string;
-    height: bigint;
-    prove: boolean;
-}
-export interface RequestQueryProtoMsg {
-    typeUrl: '/tendermint.abci.RequestQuery';
-    value: Uint8Array;
-}
-export interface RequestQuerySDKType {
-    data: Uint8Array;
-    path: string;
-    height: bigint;
-    prove: boolean;
-}
-export interface RequestBeginBlock {
-    hash: Uint8Array;
-    header: Header;
-    lastCommitInfo: LastCommitInfo;
-    byzantineValidators: Evidence[];
-}
-export interface RequestBeginBlockProtoMsg {
-    typeUrl: '/tendermint.abci.RequestBeginBlock';
-    value: Uint8Array;
-}
-export interface RequestBeginBlockSDKType {
-    hash: Uint8Array;
-    header: HeaderSDKType;
-    last_commit_info: LastCommitInfoSDKType;
-    byzantine_validators: EvidenceSDKType[];
-}
-export interface RequestCheckTx {
-    tx: Uint8Array;
-    type: CheckTxType;
-}
-export interface RequestCheckTxProtoMsg {
-    typeUrl: '/tendermint.abci.RequestCheckTx';
-    value: Uint8Array;
-}
-export interface RequestCheckTxSDKType {
-    tx: Uint8Array;
-    type: CheckTxType;
-}
-export interface RequestDeliverTx {
-    tx: Uint8Array;
-}
-export interface RequestDeliverTxProtoMsg {
-    typeUrl: '/tendermint.abci.RequestDeliverTx';
-    value: Uint8Array;
-}
-export interface RequestDeliverTxSDKType {
-    tx: Uint8Array;
-}
-export interface RequestEndBlock {
-    height: bigint;
-}
-export interface RequestEndBlockProtoMsg {
-    typeUrl: '/tendermint.abci.RequestEndBlock';
-    value: Uint8Array;
-}
-export interface RequestEndBlockSDKType {
-    height: bigint;
-}
-export interface RequestCommit {
-}
-export interface RequestCommitProtoMsg {
-    typeUrl: '/tendermint.abci.RequestCommit';
-    value: Uint8Array;
-}
-export interface RequestCommitSDKType {
-}
-/** lists available snapshots */
-export interface RequestListSnapshots {
-}
-export interface RequestListSnapshotsProtoMsg {
-    typeUrl: '/tendermint.abci.RequestListSnapshots';
-    value: Uint8Array;
-}
-/** lists available snapshots */
-export interface RequestListSnapshotsSDKType {
-}
-/** offers a snapshot to the application */
-export interface RequestOfferSnapshot {
-    /** snapshot offered by peers */
-    snapshot?: Snapshot;
-    /** light client-verified app hash for snapshot height */
-    appHash: Uint8Array;
-}
-export interface RequestOfferSnapshotProtoMsg {
-    typeUrl: '/tendermint.abci.RequestOfferSnapshot';
-    value: Uint8Array;
-}
-/** offers a snapshot to the application */
-export interface RequestOfferSnapshotSDKType {
-    snapshot?: SnapshotSDKType;
-    app_hash: Uint8Array;
-}
-/** loads a snapshot chunk */
-export interface RequestLoadSnapshotChunk {
-    height: bigint;
-    format: number;
-    chunk: number;
-}
-export interface RequestLoadSnapshotChunkProtoMsg {
-    typeUrl: '/tendermint.abci.RequestLoadSnapshotChunk';
-    value: Uint8Array;
-}
-/** loads a snapshot chunk */
-export interface RequestLoadSnapshotChunkSDKType {
-    height: bigint;
-    format: number;
-    chunk: number;
-}
-/** Applies a snapshot chunk */
-export interface RequestApplySnapshotChunk {
-    index: number;
-    chunk: Uint8Array;
-    sender: string;
-}
-export interface RequestApplySnapshotChunkProtoMsg {
-    typeUrl: '/tendermint.abci.RequestApplySnapshotChunk';
-    value: Uint8Array;
-}
-/** Applies a snapshot chunk */
-export interface RequestApplySnapshotChunkSDKType {
-    index: number;
-    chunk: Uint8Array;
-    sender: string;
-}
-export interface Response {
-    exception?: ResponseException;
-    echo?: ResponseEcho;
-    flush?: ResponseFlush;
-    info?: ResponseInfo;
-    setOption?: ResponseSetOption;
-    initChain?: ResponseInitChain;
-    query?: ResponseQuery;
-    beginBlock?: ResponseBeginBlock;
-    checkTx?: ResponseCheckTx;
-    deliverTx?: ResponseDeliverTx;
-    endBlock?: ResponseEndBlock;
-    commit?: ResponseCommit;
-    listSnapshots?: ResponseListSnapshots;
-    offerSnapshot?: ResponseOfferSnapshot;
-    loadSnapshotChunk?: ResponseLoadSnapshotChunk;
-    applySnapshotChunk?: ResponseApplySnapshotChunk;
-}
-export interface ResponseProtoMsg {
-    typeUrl: '/tendermint.abci.Response';
-    value: Uint8Array;
-}
-export interface ResponseSDKType {
-    exception?: ResponseExceptionSDKType;
-    echo?: ResponseEchoSDKType;
-    flush?: ResponseFlushSDKType;
-    info?: ResponseInfoSDKType;
-    set_option?: ResponseSetOptionSDKType;
-    init_chain?: ResponseInitChainSDKType;
-    query?: ResponseQuerySDKType;
-    begin_block?: ResponseBeginBlockSDKType;
-    check_tx?: ResponseCheckTxSDKType;
-    deliver_tx?: ResponseDeliverTxSDKType;
-    end_block?: ResponseEndBlockSDKType;
-    commit?: ResponseCommitSDKType;
-    list_snapshots?: ResponseListSnapshotsSDKType;
-    offer_snapshot?: ResponseOfferSnapshotSDKType;
-    load_snapshot_chunk?: ResponseLoadSnapshotChunkSDKType;
-    apply_snapshot_chunk?: ResponseApplySnapshotChunkSDKType;
-}
-/** nondeterministic */
-export interface ResponseException {
-    error: string;
-}
-export interface ResponseExceptionProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseException';
-    value: Uint8Array;
-}
-/** nondeterministic */
-export interface ResponseExceptionSDKType {
-    error: string;
-}
-export interface ResponseEcho {
-    message: string;
-}
-export interface ResponseEchoProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseEcho';
-    value: Uint8Array;
-}
-export interface ResponseEchoSDKType {
-    message: string;
-}
-export interface ResponseFlush {
-}
-export interface ResponseFlushProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseFlush';
-    value: Uint8Array;
-}
-export interface ResponseFlushSDKType {
-}
-export interface ResponseInfo {
-    data: string;
-    version: string;
-    appVersion: bigint;
-    lastBlockHeight: bigint;
-    lastBlockAppHash: Uint8Array;
-}
-export interface ResponseInfoProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseInfo';
-    value: Uint8Array;
-}
-export interface ResponseInfoSDKType {
-    data: string;
-    version: string;
-    app_version: bigint;
-    last_block_height: bigint;
-    last_block_app_hash: Uint8Array;
-}
-/** nondeterministic */
-export interface ResponseSetOption {
-    code: number;
-    /** bytes data = 2; */
-    log: string;
-    info: string;
-}
-export interface ResponseSetOptionProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseSetOption';
-    value: Uint8Array;
-}
-/** nondeterministic */
-export interface ResponseSetOptionSDKType {
-    code: number;
-    log: string;
-    info: string;
-}
-export interface ResponseInitChain {
-    consensusParams?: ConsensusParams;
-    validators: ValidatorUpdate[];
-    appHash: Uint8Array;
-}
-export interface ResponseInitChainProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseInitChain';
-    value: Uint8Array;
-}
-export interface ResponseInitChainSDKType {
-    consensus_params?: ConsensusParamsSDKType;
-    validators: ValidatorUpdateSDKType[];
-    app_hash: Uint8Array;
-}
-export interface ResponseQuery {
-    code: number;
-    /** bytes data = 2; // use "value" instead. */
-    log: string;
-    /** nondeterministic */
-    info: string;
-    index: bigint;
-    key: Uint8Array;
-    value: Uint8Array;
-    proofOps?: ProofOps;
-    height: bigint;
-    codespace: string;
-}
-export interface ResponseQueryProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseQuery';
-    value: Uint8Array;
-}
-export interface ResponseQuerySDKType {
-    code: number;
-    log: string;
-    info: string;
-    index: bigint;
-    key: Uint8Array;
-    value: Uint8Array;
-    proof_ops?: ProofOpsSDKType;
-    height: bigint;
-    codespace: string;
-}
-export interface ResponseBeginBlock {
-    events: Event[];
-}
-export interface ResponseBeginBlockProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseBeginBlock';
-    value: Uint8Array;
-}
-export interface ResponseBeginBlockSDKType {
-    events: EventSDKType[];
-}
-export interface ResponseCheckTx {
-    code: number;
-    data: Uint8Array;
-    /** nondeterministic */
-    log: string;
-    /** nondeterministic */
-    info: string;
-    gasWanted: bigint;
-    gasUsed: bigint;
-    events: Event[];
-    codespace: string;
-}
-export interface ResponseCheckTxProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseCheckTx';
-    value: Uint8Array;
-}
-export interface ResponseCheckTxSDKType {
-    code: number;
-    data: Uint8Array;
-    log: string;
-    info: string;
-    gas_wanted: bigint;
-    gas_used: bigint;
-    events: EventSDKType[];
-    codespace: string;
-}
-export interface ResponseDeliverTx {
-    code: number;
-    data: Uint8Array;
-    /** nondeterministic */
-    log: string;
-    /** nondeterministic */
-    info: string;
-    gasWanted: bigint;
-    gasUsed: bigint;
-    events: Event[];
-    codespace: string;
-}
-export interface ResponseDeliverTxProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseDeliverTx';
-    value: Uint8Array;
-}
-export interface ResponseDeliverTxSDKType {
-    code: number;
-    data: Uint8Array;
-    log: string;
-    info: string;
-    gas_wanted: bigint;
-    gas_used: bigint;
-    events: EventSDKType[];
-    codespace: string;
-}
-export interface ResponseEndBlock {
-    validatorUpdates: ValidatorUpdate[];
-    consensusParamUpdates?: ConsensusParams;
-    events: Event[];
-}
-export interface ResponseEndBlockProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseEndBlock';
-    value: Uint8Array;
-}
-export interface ResponseEndBlockSDKType {
-    validator_updates: ValidatorUpdateSDKType[];
-    consensus_param_updates?: ConsensusParamsSDKType;
-    events: EventSDKType[];
-}
-export interface ResponseCommit {
-    /** reserve 1 */
-    data: Uint8Array;
-    retainHeight: bigint;
-}
-export interface ResponseCommitProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseCommit';
-    value: Uint8Array;
-}
-export interface ResponseCommitSDKType {
-    data: Uint8Array;
-    retain_height: bigint;
-}
-export interface ResponseListSnapshots {
-    snapshots: Snapshot[];
-}
-export interface ResponseListSnapshotsProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseListSnapshots';
-    value: Uint8Array;
-}
-export interface ResponseListSnapshotsSDKType {
-    snapshots: SnapshotSDKType[];
-}
-export interface ResponseOfferSnapshot {
-    result: ResponseOfferSnapshot_Result;
-}
-export interface ResponseOfferSnapshotProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseOfferSnapshot';
-    value: Uint8Array;
-}
-export interface ResponseOfferSnapshotSDKType {
-    result: ResponseOfferSnapshot_Result;
-}
-export interface ResponseLoadSnapshotChunk {
-    chunk: Uint8Array;
-}
-export interface ResponseLoadSnapshotChunkProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseLoadSnapshotChunk';
-    value: Uint8Array;
-}
-export interface ResponseLoadSnapshotChunkSDKType {
-    chunk: Uint8Array;
-}
-export interface ResponseApplySnapshotChunk {
-    result: ResponseApplySnapshotChunk_Result;
-    /** Chunks to refetch and reapply */
-    refetchChunks: number[];
-    /** Chunk senders to reject and ban */
-    rejectSenders: string[];
-}
-export interface ResponseApplySnapshotChunkProtoMsg {
-    typeUrl: '/tendermint.abci.ResponseApplySnapshotChunk';
-    value: Uint8Array;
-}
-export interface ResponseApplySnapshotChunkSDKType {
-    result: ResponseApplySnapshotChunk_Result;
-    refetch_chunks: number[];
-    reject_senders: string[];
-}
-/**
- * ConsensusParams contains all consensus-relevant parameters
- * that can be adjusted by the abci app
- */
-export interface ConsensusParams {
-    block?: BlockParams;
-    evidence?: EvidenceParams;
-    validator?: ValidatorParams;
-    version?: VersionParams;
-}
-export interface ConsensusParamsProtoMsg {
-    typeUrl: '/tendermint.abci.ConsensusParams';
-    value: Uint8Array;
-}
-/**
- * ConsensusParams contains all consensus-relevant parameters
- * that can be adjusted by the abci app
- */
-export interface ConsensusParamsSDKType {
-    block?: BlockParamsSDKType;
-    evidence?: EvidenceParamsSDKType;
-    validator?: ValidatorParamsSDKType;
-    version?: VersionParamsSDKType;
-}
-/** BlockParams contains limits on the block size. */
-export interface BlockParams {
-    /** Note: must be greater than 0 */
-    maxBytes: bigint;
-    /** Note: must be greater or equal to -1 */
-    maxGas: bigint;
-}
-export interface BlockParamsProtoMsg {
-    typeUrl: '/tendermint.abci.BlockParams';
-    value: Uint8Array;
-}
-/** BlockParams contains limits on the block size. */
-export interface BlockParamsSDKType {
-    max_bytes: bigint;
-    max_gas: bigint;
-}
-export interface LastCommitInfo {
-    round: number;
-    votes: VoteInfo[];
-}
-export interface LastCommitInfoProtoMsg {
-    typeUrl: '/tendermint.abci.LastCommitInfo';
-    value: Uint8Array;
-}
-export interface LastCommitInfoSDKType {
-    round: number;
-    votes: VoteInfoSDKType[];
-}
-/**
- * Event allows application developers to attach additional information to
- * ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
- * Later, transactions may be queried using these events.
- */
-export interface Event {
-    type: string;
-    attributes: EventAttribute[];
-}
-export interface EventProtoMsg {
-    typeUrl: '/tendermint.abci.Event';
-    value: Uint8Array;
-}
-/**
- * Event allows application developers to attach additional information to
- * ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
- * Later, transactions may be queried using these events.
- */
-export interface EventSDKType {
-    type: string;
-    attributes: EventAttributeSDKType[];
-}
-/** EventAttribute is a single key-value pair, associated with an event. */
-export interface EventAttribute {
-    key: Uint8Array;
-    value: Uint8Array;
-    /** nondeterministic */
-    index: boolean;
-}
-export interface EventAttributeProtoMsg {
-    typeUrl: '/tendermint.abci.EventAttribute';
-    value: Uint8Array;
-}
-/** EventAttribute is a single key-value pair, associated with an event. */
-export interface EventAttributeSDKType {
-    key: Uint8Array;
-    value: Uint8Array;
-    index: boolean;
-}
-/**
- * TxResult contains results of executing the transaction.
- *
- * One usage is indexing transaction results.
- */
-export interface TxResult {
-    height: bigint;
-    index: number;
-    tx: Uint8Array;
-    result: ResponseDeliverTx;
-}
-export interface TxResultProtoMsg {
-    typeUrl: '/tendermint.abci.TxResult';
-    value: Uint8Array;
-}
-/**
- * TxResult contains results of executing the transaction.
- *
- * One usage is indexing transaction results.
- */
-export interface TxResultSDKType {
-    height: bigint;
-    index: number;
-    tx: Uint8Array;
-    result: ResponseDeliverTxSDKType;
-}
-/** Validator */
-export interface Validator {
-    /**
-     * The first 20 bytes of SHA256(public key)
-     * PubKey pub_key = 2 [(gogoproto.nullable)=false];
-     */
-    address: Uint8Array;
-    /** The voting power */
-    power: bigint;
-}
-export interface ValidatorProtoMsg {
-    typeUrl: '/tendermint.abci.Validator';
-    value: Uint8Array;
-}
-/** Validator */
-export interface ValidatorSDKType {
-    address: Uint8Array;
-    power: bigint;
-}
-/** ValidatorUpdate */
-export interface ValidatorUpdate {
-    pubKey: PublicKey;
-    power: bigint;
-}
-export interface ValidatorUpdateProtoMsg {
-    typeUrl: '/tendermint.abci.ValidatorUpdate';
-    value: Uint8Array;
-}
-/** ValidatorUpdate */
-export interface ValidatorUpdateSDKType {
-    pub_key: PublicKeySDKType;
-    power: bigint;
-}
-/** VoteInfo */
-export interface VoteInfo {
-    validator: Validator;
-    signedLastBlock: boolean;
-}
-export interface VoteInfoProtoMsg {
-    typeUrl: '/tendermint.abci.VoteInfo';
-    value: Uint8Array;
-}
-/** VoteInfo */
-export interface VoteInfoSDKType {
-    validator: ValidatorSDKType;
-    signed_last_block: boolean;
-}
-export interface Evidence {
-    type: EvidenceType;
-    /** The offending validator */
-    validator: Validator;
-    /** The height when the offense occurred */
-    height: bigint;
-    /** The corresponding time where the offense occurred */
-    time: Timestamp;
-    /**
-     * Total voting power of the validator set in case the ABCI application does
-     * not store historical validators.
-     * https://github.com/tendermint/tendermint/issues/4581
-     */
-    totalVotingPower: bigint;
-}
-export interface EvidenceProtoMsg {
-    typeUrl: '/tendermint.abci.Evidence';
-    value: Uint8Array;
-}
-export interface EvidenceSDKType {
-    type: EvidenceType;
-    validator: ValidatorSDKType;
-    height: bigint;
-    time: TimestampSDKType;
-    total_voting_power: bigint;
-}
-export interface Snapshot {
-    /** The height at which the snapshot was taken */
-    height: bigint;
-    /** The application-specific snapshot format */
-    format: number;
-    /** Number of chunks in the snapshot */
-    chunks: number;
-    /** Arbitrary snapshot hash, equal only if identical */
-    hash: Uint8Array;
-    /** Arbitrary application metadata */
-    metadata: Uint8Array;
-}
-export interface SnapshotProtoMsg {
-    typeUrl: '/tendermint.abci.Snapshot';
-    value: Uint8Array;
-}
-export interface SnapshotSDKType {
-    height: bigint;
-    format: number;
-    chunks: number;
-    hash: Uint8Array;
-    metadata: Uint8Array;
-}
-export declare const Request: {
-    typeUrl: string;
-    encode(message: Request, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): Request;
-    fromJSON(object: any): Request;
-    toJSON(message: Request): JsonSafe<Request>;
-    fromPartial(object: Partial<Request>): Request;
-    fromProtoMsg(message: RequestProtoMsg): Request;
-    toProto(message: Request): Uint8Array;
-    toProtoMsg(message: Request): RequestProtoMsg;
-};
-export declare const RequestEcho: {
-    typeUrl: string;
-    encode(message: RequestEcho, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestEcho;
-    fromJSON(object: any): RequestEcho;
-    toJSON(message: RequestEcho): JsonSafe<RequestEcho>;
-    fromPartial(object: Partial<RequestEcho>): RequestEcho;
-    fromProtoMsg(message: RequestEchoProtoMsg): RequestEcho;
-    toProto(message: RequestEcho): Uint8Array;
-    toProtoMsg(message: RequestEcho): RequestEchoProtoMsg;
-};
-export declare const RequestFlush: {
-    typeUrl: string;
-    encode(_: RequestFlush, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestFlush;
-    fromJSON(_: any): RequestFlush;
-    toJSON(_: RequestFlush): JsonSafe<RequestFlush>;
-    fromPartial(_: Partial<RequestFlush>): RequestFlush;
-    fromProtoMsg(message: RequestFlushProtoMsg): RequestFlush;
-    toProto(message: RequestFlush): Uint8Array;
-    toProtoMsg(message: RequestFlush): RequestFlushProtoMsg;
-};
-export declare const RequestInfo: {
-    typeUrl: string;
-    encode(message: RequestInfo, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestInfo;
-    fromJSON(object: any): RequestInfo;
-    toJSON(message: RequestInfo): JsonSafe<RequestInfo>;
-    fromPartial(object: Partial<RequestInfo>): RequestInfo;
-    fromProtoMsg(message: RequestInfoProtoMsg): RequestInfo;
-    toProto(message: RequestInfo): Uint8Array;
-    toProtoMsg(message: RequestInfo): RequestInfoProtoMsg;
-};
-export declare const RequestSetOption: {
-    typeUrl: string;
-    encode(message: RequestSetOption, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestSetOption;
-    fromJSON(object: any): RequestSetOption;
-    toJSON(message: RequestSetOption): JsonSafe<RequestSetOption>;
-    fromPartial(object: Partial<RequestSetOption>): RequestSetOption;
-    fromProtoMsg(message: RequestSetOptionProtoMsg): RequestSetOption;
-    toProto(message: RequestSetOption): Uint8Array;
-    toProtoMsg(message: RequestSetOption): RequestSetOptionProtoMsg;
-};
-export declare const RequestInitChain: {
-    typeUrl: string;
-    encode(message: RequestInitChain, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestInitChain;
-    fromJSON(object: any): RequestInitChain;
-    toJSON(message: RequestInitChain): JsonSafe<RequestInitChain>;
-    fromPartial(object: Partial<RequestInitChain>): RequestInitChain;
-    fromProtoMsg(message: RequestInitChainProtoMsg): RequestInitChain;
-    toProto(message: RequestInitChain): Uint8Array;
-    toProtoMsg(message: RequestInitChain): RequestInitChainProtoMsg;
-};
-export declare const RequestQuery: {
-    typeUrl: string;
-    encode(message: RequestQuery, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestQuery;
-    fromJSON(object: any): RequestQuery;
-    toJSON(message: RequestQuery): JsonSafe<RequestQuery>;
-    fromPartial(object: Partial<RequestQuery>): RequestQuery;
-    fromProtoMsg(message: RequestQueryProtoMsg): RequestQuery;
-    toProto(message: RequestQuery): Uint8Array;
-    toProtoMsg(message: RequestQuery): RequestQueryProtoMsg;
-};
-export declare const RequestBeginBlock: {
-    typeUrl: string;
-    encode(message: RequestBeginBlock, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestBeginBlock;
-    fromJSON(object: any): RequestBeginBlock;
-    toJSON(message: RequestBeginBlock): JsonSafe<RequestBeginBlock>;
-    fromPartial(object: Partial<RequestBeginBlock>): RequestBeginBlock;
-    fromProtoMsg(message: RequestBeginBlockProtoMsg): RequestBeginBlock;
-    toProto(message: RequestBeginBlock): Uint8Array;
-    toProtoMsg(message: RequestBeginBlock): RequestBeginBlockProtoMsg;
-};
-export declare const RequestCheckTx: {
-    typeUrl: string;
-    encode(message: RequestCheckTx, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestCheckTx;
-    fromJSON(object: any): RequestCheckTx;
-    toJSON(message: RequestCheckTx): JsonSafe<RequestCheckTx>;
-    fromPartial(object: Partial<RequestCheckTx>): RequestCheckTx;
-    fromProtoMsg(message: RequestCheckTxProtoMsg): RequestCheckTx;
-    toProto(message: RequestCheckTx): Uint8Array;
-    toProtoMsg(message: RequestCheckTx): RequestCheckTxProtoMsg;
-};
-export declare const RequestDeliverTx: {
-    typeUrl: string;
-    encode(message: RequestDeliverTx, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestDeliverTx;
-    fromJSON(object: any): RequestDeliverTx;
-    toJSON(message: RequestDeliverTx): JsonSafe<RequestDeliverTx>;
-    fromPartial(object: Partial<RequestDeliverTx>): RequestDeliverTx;
-    fromProtoMsg(message: RequestDeliverTxProtoMsg): RequestDeliverTx;
-    toProto(message: RequestDeliverTx): Uint8Array;
-    toProtoMsg(message: RequestDeliverTx): RequestDeliverTxProtoMsg;
-};
-export declare const RequestEndBlock: {
-    typeUrl: string;
-    encode(message: RequestEndBlock, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestEndBlock;
-    fromJSON(object: any): RequestEndBlock;
-    toJSON(message: RequestEndBlock): JsonSafe<RequestEndBlock>;
-    fromPartial(object: Partial<RequestEndBlock>): RequestEndBlock;
-    fromProtoMsg(message: RequestEndBlockProtoMsg): RequestEndBlock;
-    toProto(message: RequestEndBlock): Uint8Array;
-    toProtoMsg(message: RequestEndBlock): RequestEndBlockProtoMsg;
-};
-export declare const RequestCommit: {
-    typeUrl: string;
-    encode(_: RequestCommit, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestCommit;
-    fromJSON(_: any): RequestCommit;
-    toJSON(_: RequestCommit): JsonSafe<RequestCommit>;
-    fromPartial(_: Partial<RequestCommit>): RequestCommit;
-    fromProtoMsg(message: RequestCommitProtoMsg): RequestCommit;
-    toProto(message: RequestCommit): Uint8Array;
-    toProtoMsg(message: RequestCommit): RequestCommitProtoMsg;
-};
-export declare const RequestListSnapshots: {
-    typeUrl: string;
-    encode(_: RequestListSnapshots, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestListSnapshots;
-    fromJSON(_: any): RequestListSnapshots;
-    toJSON(_: RequestListSnapshots): JsonSafe<RequestListSnapshots>;
-    fromPartial(_: Partial<RequestListSnapshots>): RequestListSnapshots;
-    fromProtoMsg(message: RequestListSnapshotsProtoMsg): RequestListSnapshots;
-    toProto(message: RequestListSnapshots): Uint8Array;
-    toProtoMsg(message: RequestListSnapshots): RequestListSnapshotsProtoMsg;
-};
-export declare const RequestOfferSnapshot: {
-    typeUrl: string;
-    encode(message: RequestOfferSnapshot, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestOfferSnapshot;
-    fromJSON(object: any): RequestOfferSnapshot;
-    toJSON(message: RequestOfferSnapshot): JsonSafe<RequestOfferSnapshot>;
-    fromPartial(object: Partial<RequestOfferSnapshot>): RequestOfferSnapshot;
-    fromProtoMsg(message: RequestOfferSnapshotProtoMsg): RequestOfferSnapshot;
-    toProto(message: RequestOfferSnapshot): Uint8Array;
-    toProtoMsg(message: RequestOfferSnapshot): RequestOfferSnapshotProtoMsg;
-};
-export declare const RequestLoadSnapshotChunk: {
-    typeUrl: string;
-    encode(message: RequestLoadSnapshotChunk, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestLoadSnapshotChunk;
-    fromJSON(object: any): RequestLoadSnapshotChunk;
-    toJSON(message: RequestLoadSnapshotChunk): JsonSafe<RequestLoadSnapshotChunk>;
-    fromPartial(object: Partial<RequestLoadSnapshotChunk>): RequestLoadSnapshotChunk;
-    fromProtoMsg(message: RequestLoadSnapshotChunkProtoMsg): RequestLoadSnapshotChunk;
-    toProto(message: RequestLoadSnapshotChunk): Uint8Array;
-    toProtoMsg(message: RequestLoadSnapshotChunk): RequestLoadSnapshotChunkProtoMsg;
-};
-export declare const RequestApplySnapshotChunk: {
-    typeUrl: string;
-    encode(message: RequestApplySnapshotChunk, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): RequestApplySnapshotChunk;
-    fromJSON(object: any): RequestApplySnapshotChunk;
-    toJSON(message: RequestApplySnapshotChunk): JsonSafe<RequestApplySnapshotChunk>;
-    fromPartial(object: Partial<RequestApplySnapshotChunk>): RequestApplySnapshotChunk;
-    fromProtoMsg(message: RequestApplySnapshotChunkProtoMsg): RequestApplySnapshotChunk;
-    toProto(message: RequestApplySnapshotChunk): Uint8Array;
-    toProtoMsg(message: RequestApplySnapshotChunk): RequestApplySnapshotChunkProtoMsg;
-};
-export declare const Response: {
-    typeUrl: string;
-    encode(message: Response, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): Response;
-    fromJSON(object: any): Response;
-    toJSON(message: Response): JsonSafe<Response>;
-    fromPartial(object: Partial<Response>): Response;
-    fromProtoMsg(message: ResponseProtoMsg): Response;
-    toProto(message: Response): Uint8Array;
-    toProtoMsg(message: Response): ResponseProtoMsg;
-};
-export declare const ResponseException: {
-    typeUrl: string;
-    encode(message: ResponseException, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseException;
-    fromJSON(object: any): ResponseException;
-    toJSON(message: ResponseException): JsonSafe<ResponseException>;
-    fromPartial(object: Partial<ResponseException>): ResponseException;
-    fromProtoMsg(message: ResponseExceptionProtoMsg): ResponseException;
-    toProto(message: ResponseException): Uint8Array;
-    toProtoMsg(message: ResponseException): ResponseExceptionProtoMsg;
-};
-export declare const ResponseEcho: {
-    typeUrl: string;
-    encode(message: ResponseEcho, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseEcho;
-    fromJSON(object: any): ResponseEcho;
-    toJSON(message: ResponseEcho): JsonSafe<ResponseEcho>;
-    fromPartial(object: Partial<ResponseEcho>): ResponseEcho;
-    fromProtoMsg(message: ResponseEchoProtoMsg): ResponseEcho;
-    toProto(message: ResponseEcho): Uint8Array;
-    toProtoMsg(message: ResponseEcho): ResponseEchoProtoMsg;
-};
-export declare const ResponseFlush: {
-    typeUrl: string;
-    encode(_: ResponseFlush, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseFlush;
-    fromJSON(_: any): ResponseFlush;
-    toJSON(_: ResponseFlush): JsonSafe<ResponseFlush>;
-    fromPartial(_: Partial<ResponseFlush>): ResponseFlush;
-    fromProtoMsg(message: ResponseFlushProtoMsg): ResponseFlush;
-    toProto(message: ResponseFlush): Uint8Array;
-    toProtoMsg(message: ResponseFlush): ResponseFlushProtoMsg;
-};
-export declare const ResponseInfo: {
-    typeUrl: string;
-    encode(message: ResponseInfo, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseInfo;
-    fromJSON(object: any): ResponseInfo;
-    toJSON(message: ResponseInfo): JsonSafe<ResponseInfo>;
-    fromPartial(object: Partial<ResponseInfo>): ResponseInfo;
-    fromProtoMsg(message: ResponseInfoProtoMsg): ResponseInfo;
-    toProto(message: ResponseInfo): Uint8Array;
-    toProtoMsg(message: ResponseInfo): ResponseInfoProtoMsg;
-};
-export declare const ResponseSetOption: {
-    typeUrl: string;
-    encode(message: ResponseSetOption, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseSetOption;
-    fromJSON(object: any): ResponseSetOption;
-    toJSON(message: ResponseSetOption): JsonSafe<ResponseSetOption>;
-    fromPartial(object: Partial<ResponseSetOption>): ResponseSetOption;
-    fromProtoMsg(message: ResponseSetOptionProtoMsg): ResponseSetOption;
-    toProto(message: ResponseSetOption): Uint8Array;
-    toProtoMsg(message: ResponseSetOption): ResponseSetOptionProtoMsg;
-};
-export declare const ResponseInitChain: {
-    typeUrl: string;
-    encode(message: ResponseInitChain, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseInitChain;
-    fromJSON(object: any): ResponseInitChain;
-    toJSON(message: ResponseInitChain): JsonSafe<ResponseInitChain>;
-    fromPartial(object: Partial<ResponseInitChain>): ResponseInitChain;
-    fromProtoMsg(message: ResponseInitChainProtoMsg): ResponseInitChain;
-    toProto(message: ResponseInitChain): Uint8Array;
-    toProtoMsg(message: ResponseInitChain): ResponseInitChainProtoMsg;
-};
-export declare const ResponseQuery: {
-    typeUrl: string;
-    encode(message: ResponseQuery, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseQuery;
-    fromJSON(object: any): ResponseQuery;
-    toJSON(message: ResponseQuery): JsonSafe<ResponseQuery>;
-    fromPartial(object: Partial<ResponseQuery>): ResponseQuery;
-    fromProtoMsg(message: ResponseQueryProtoMsg): ResponseQuery;
-    toProto(message: ResponseQuery): Uint8Array;
-    toProtoMsg(message: ResponseQuery): ResponseQueryProtoMsg;
-};
-export declare const ResponseBeginBlock: {
-    typeUrl: string;
-    encode(message: ResponseBeginBlock, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseBeginBlock;
-    fromJSON(object: any): ResponseBeginBlock;
-    toJSON(message: ResponseBeginBlock): JsonSafe<ResponseBeginBlock>;
-    fromPartial(object: Partial<ResponseBeginBlock>): ResponseBeginBlock;
-    fromProtoMsg(message: ResponseBeginBlockProtoMsg): ResponseBeginBlock;
-    toProto(message: ResponseBeginBlock): Uint8Array;
-    toProtoMsg(message: ResponseBeginBlock): ResponseBeginBlockProtoMsg;
-};
-export declare const ResponseCheckTx: {
-    typeUrl: string;
-    encode(message: ResponseCheckTx, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseCheckTx;
-    fromJSON(object: any): ResponseCheckTx;
-    toJSON(message: ResponseCheckTx): JsonSafe<ResponseCheckTx>;
-    fromPartial(object: Partial<ResponseCheckTx>): ResponseCheckTx;
-    fromProtoMsg(message: ResponseCheckTxProtoMsg): ResponseCheckTx;
-    toProto(message: ResponseCheckTx): Uint8Array;
-    toProtoMsg(message: ResponseCheckTx): ResponseCheckTxProtoMsg;
-};
-export declare const ResponseDeliverTx: {
-    typeUrl: string;
-    encode(message: ResponseDeliverTx, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseDeliverTx;
-    fromJSON(object: any): ResponseDeliverTx;
-    toJSON(message: ResponseDeliverTx): JsonSafe<ResponseDeliverTx>;
-    fromPartial(object: Partial<ResponseDeliverTx>): ResponseDeliverTx;
-    fromProtoMsg(message: ResponseDeliverTxProtoMsg): ResponseDeliverTx;
-    toProto(message: ResponseDeliverTx): Uint8Array;
-    toProtoMsg(message: ResponseDeliverTx): ResponseDeliverTxProtoMsg;
-};
-export declare const ResponseEndBlock: {
-    typeUrl: string;
-    encode(message: ResponseEndBlock, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseEndBlock;
-    fromJSON(object: any): ResponseEndBlock;
-    toJSON(message: ResponseEndBlock): JsonSafe<ResponseEndBlock>;
-    fromPartial(object: Partial<ResponseEndBlock>): ResponseEndBlock;
-    fromProtoMsg(message: ResponseEndBlockProtoMsg): ResponseEndBlock;
-    toProto(message: ResponseEndBlock): Uint8Array;
-    toProtoMsg(message: ResponseEndBlock): ResponseEndBlockProtoMsg;
-};
-export declare const ResponseCommit: {
-    typeUrl: string;
-    encode(message: ResponseCommit, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseCommit;
-    fromJSON(object: any): ResponseCommit;
-    toJSON(message: ResponseCommit): JsonSafe<ResponseCommit>;
-    fromPartial(object: Partial<ResponseCommit>): ResponseCommit;
-    fromProtoMsg(message: ResponseCommitProtoMsg): ResponseCommit;
-    toProto(message: ResponseCommit): Uint8Array;
-    toProtoMsg(message: ResponseCommit): ResponseCommitProtoMsg;
-};
-export declare const ResponseListSnapshots: {
-    typeUrl: string;
-    encode(message: ResponseListSnapshots, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseListSnapshots;
-    fromJSON(object: any): ResponseListSnapshots;
-    toJSON(message: ResponseListSnapshots): JsonSafe<ResponseListSnapshots>;
-    fromPartial(object: Partial<ResponseListSnapshots>): ResponseListSnapshots;
-    fromProtoMsg(message: ResponseListSnapshotsProtoMsg): ResponseListSnapshots;
-    toProto(message: ResponseListSnapshots): Uint8Array;
-    toProtoMsg(message: ResponseListSnapshots): ResponseListSnapshotsProtoMsg;
-};
-export declare const ResponseOfferSnapshot: {
-    typeUrl: string;
-    encode(message: ResponseOfferSnapshot, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseOfferSnapshot;
-    fromJSON(object: any): ResponseOfferSnapshot;
-    toJSON(message: ResponseOfferSnapshot): JsonSafe<ResponseOfferSnapshot>;
-    fromPartial(object: Partial<ResponseOfferSnapshot>): ResponseOfferSnapshot;
-    fromProtoMsg(message: ResponseOfferSnapshotProtoMsg): ResponseOfferSnapshot;
-    toProto(message: ResponseOfferSnapshot): Uint8Array;
-    toProtoMsg(message: ResponseOfferSnapshot): ResponseOfferSnapshotProtoMsg;
-};
-export declare const ResponseLoadSnapshotChunk: {
-    typeUrl: string;
-    encode(message: ResponseLoadSnapshotChunk, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseLoadSnapshotChunk;
-    fromJSON(object: any): ResponseLoadSnapshotChunk;
-    toJSON(message: ResponseLoadSnapshotChunk): JsonSafe<ResponseLoadSnapshotChunk>;
-    fromPartial(object: Partial<ResponseLoadSnapshotChunk>): ResponseLoadSnapshotChunk;
-    fromProtoMsg(message: ResponseLoadSnapshotChunkProtoMsg): ResponseLoadSnapshotChunk;
-    toProto(message: ResponseLoadSnapshotChunk): Uint8Array;
-    toProtoMsg(message: ResponseLoadSnapshotChunk): ResponseLoadSnapshotChunkProtoMsg;
-};
-export declare const ResponseApplySnapshotChunk: {
-    typeUrl: string;
-    encode(message: ResponseApplySnapshotChunk, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ResponseApplySnapshotChunk;
-    fromJSON(object: any): ResponseApplySnapshotChunk;
-    toJSON(message: ResponseApplySnapshotChunk): JsonSafe<ResponseApplySnapshotChunk>;
-    fromPartial(object: Partial<ResponseApplySnapshotChunk>): ResponseApplySnapshotChunk;
-    fromProtoMsg(message: ResponseApplySnapshotChunkProtoMsg): ResponseApplySnapshotChunk;
-    toProto(message: ResponseApplySnapshotChunk): Uint8Array;
-    toProtoMsg(message: ResponseApplySnapshotChunk): ResponseApplySnapshotChunkProtoMsg;
-};
-export declare const ConsensusParams: {
-    typeUrl: string;
-    encode(message: ConsensusParams, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ConsensusParams;
-    fromJSON(object: any): ConsensusParams;
-    toJSON(message: ConsensusParams): JsonSafe<ConsensusParams>;
-    fromPartial(object: Partial<ConsensusParams>): ConsensusParams;
-    fromProtoMsg(message: ConsensusParamsProtoMsg): ConsensusParams;
-    toProto(message: ConsensusParams): Uint8Array;
-    toProtoMsg(message: ConsensusParams): ConsensusParamsProtoMsg;
-};
-export declare const BlockParams: {
-    typeUrl: string;
-    encode(message: BlockParams, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): BlockParams;
-    fromJSON(object: any): BlockParams;
-    toJSON(message: BlockParams): JsonSafe<BlockParams>;
-    fromPartial(object: Partial<BlockParams>): BlockParams;
-    fromProtoMsg(message: BlockParamsProtoMsg): BlockParams;
-    toProto(message: BlockParams): Uint8Array;
-    toProtoMsg(message: BlockParams): BlockParamsProtoMsg;
-};
-export declare const LastCommitInfo: {
-    typeUrl: string;
-    encode(message: LastCommitInfo, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): LastCommitInfo;
-    fromJSON(object: any): LastCommitInfo;
-    toJSON(message: LastCommitInfo): JsonSafe<LastCommitInfo>;
-    fromPartial(object: Partial<LastCommitInfo>): LastCommitInfo;
-    fromProtoMsg(message: LastCommitInfoProtoMsg): LastCommitInfo;
-    toProto(message: LastCommitInfo): Uint8Array;
-    toProtoMsg(message: LastCommitInfo): LastCommitInfoProtoMsg;
-};
-export declare const Event: {
-    typeUrl: string;
-    encode(message: Event, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): Event;
-    fromJSON(object: any): Event;
-    toJSON(message: Event): JsonSafe<Event>;
-    fromPartial(object: Partial<Event>): Event;
-    fromProtoMsg(message: EventProtoMsg): Event;
-    toProto(message: Event): Uint8Array;
-    toProtoMsg(message: Event): EventProtoMsg;
-};
-export declare const EventAttribute: {
-    typeUrl: string;
-    encode(message: EventAttribute, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): EventAttribute;
-    fromJSON(object: any): EventAttribute;
-    toJSON(message: EventAttribute): JsonSafe<EventAttribute>;
-    fromPartial(object: Partial<EventAttribute>): EventAttribute;
-    fromProtoMsg(message: EventAttributeProtoMsg): EventAttribute;
-    toProto(message: EventAttribute): Uint8Array;
-    toProtoMsg(message: EventAttribute): EventAttributeProtoMsg;
-};
-export declare const TxResult: {
-    typeUrl: string;
-    encode(message: TxResult, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): TxResult;
-    fromJSON(object: any): TxResult;
-    toJSON(message: TxResult): JsonSafe<TxResult>;
-    fromPartial(object: Partial<TxResult>): TxResult;
-    fromProtoMsg(message: TxResultProtoMsg): TxResult;
-    toProto(message: TxResult): Uint8Array;
-    toProtoMsg(message: TxResult): TxResultProtoMsg;
-};
-export declare const Validator: {
-    typeUrl: string;
-    encode(message: Validator, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): Validator;
-    fromJSON(object: any): Validator;
-    toJSON(message: Validator): JsonSafe<Validator>;
-    fromPartial(object: Partial<Validator>): Validator;
-    fromProtoMsg(message: ValidatorProtoMsg): Validator;
-    toProto(message: Validator): Uint8Array;
-    toProtoMsg(message: Validator): ValidatorProtoMsg;
-};
-export declare const ValidatorUpdate: {
-    typeUrl: string;
-    encode(message: ValidatorUpdate, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): ValidatorUpdate;
-    fromJSON(object: any): ValidatorUpdate;
-    toJSON(message: ValidatorUpdate): JsonSafe<ValidatorUpdate>;
-    fromPartial(object: Partial<ValidatorUpdate>): ValidatorUpdate;
-    fromProtoMsg(message: ValidatorUpdateProtoMsg): ValidatorUpdate;
-    toProto(message: ValidatorUpdate): Uint8Array;
-    toProtoMsg(message: ValidatorUpdate): ValidatorUpdateProtoMsg;
-};
-export declare const VoteInfo: {
-    typeUrl: string;
-    encode(message: VoteInfo, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): VoteInfo;
-    fromJSON(object: any): VoteInfo;
-    toJSON(message: VoteInfo): JsonSafe<VoteInfo>;
-    fromPartial(object: Partial<VoteInfo>): VoteInfo;
-    fromProtoMsg(message: VoteInfoProtoMsg): VoteInfo;
-    toProto(message: VoteInfo): Uint8Array;
-    toProtoMsg(message: VoteInfo): VoteInfoProtoMsg;
-};
-export declare const Evidence: {
-    typeUrl: string;
-    encode(message: Evidence, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): Evidence;
-    fromJSON(object: any): Evidence;
-    toJSON(message: Evidence): JsonSafe<Evidence>;
-    fromPartial(object: Partial<Evidence>): Evidence;
-    fromProtoMsg(message: EvidenceProtoMsg): Evidence;
-    toProto(message: Evidence): Uint8Array;
-    toProtoMsg(message: Evidence): EvidenceProtoMsg;
-};
-export declare const Snapshot: {
-    typeUrl: string;
-    encode(message: Snapshot, writer?: BinaryWriter): BinaryWriter;
-    decode(input: BinaryReader | Uint8Array, length?: number): Snapshot;
-    fromJSON(object: any): Snapshot;
-    toJSON(message: Snapshot): JsonSafe<Snapshot>;
-    fromPartial(object: Partial<Snapshot>): Snapshot;
-    fromProtoMsg(message: SnapshotProtoMsg): Snapshot;
-    toProto(message: Snapshot): Uint8Array;
-    toProtoMsg(message: Snapshot): SnapshotProtoMsg;
-};
diff --git a/dist/codegen/tendermint/abci/types.js b/dist/codegen/tendermint/abci/types.js
deleted file mode 100644
index 88153935a8c74d4286a5077951f3fb59c1197381..0000000000000000000000000000000000000000
--- a/dist/codegen/tendermint/abci/types.js
+++ /dev/null
@@ -1,4433 +0,0 @@
-//@ts-nocheck
-import { Timestamp, } from '../../google/protobuf/timestamp.js';
-import { Header } from '../types/types.js';
-import { ProofOps } from '../crypto/proof.js';
-import { EvidenceParams, ValidatorParams, VersionParams, } from '../types/params.js';
-import { PublicKey } from '../crypto/keys.js';
-import { BinaryReader, BinaryWriter } from '../../binary.js';
-import { isSet, fromJsonTimestamp, bytesFromBase64, fromTimestamp, base64FromBytes, } from '../../helpers.js';
-export var CheckTxType;
-(function (CheckTxType) {
-    CheckTxType[CheckTxType["NEW"] = 0] = "NEW";
-    CheckTxType[CheckTxType["RECHECK"] = 1] = "RECHECK";
-    CheckTxType[CheckTxType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
-})(CheckTxType || (CheckTxType = {}));
-export const CheckTxTypeSDKType = CheckTxType;
-export function checkTxTypeFromJSON(object) {
-    switch (object) {
-        case 0:
-        case 'NEW':
-            return CheckTxType.NEW;
-        case 1:
-        case 'RECHECK':
-            return CheckTxType.RECHECK;
-        case -1:
-        case 'UNRECOGNIZED':
-        default:
-            return CheckTxType.UNRECOGNIZED;
-    }
-}
-export function checkTxTypeToJSON(object) {
-    switch (object) {
-        case CheckTxType.NEW:
-            return 'NEW';
-        case CheckTxType.RECHECK:
-            return 'RECHECK';
-        case CheckTxType.UNRECOGNIZED:
-        default:
-            return 'UNRECOGNIZED';
-    }
-}
-export var ResponseOfferSnapshot_Result;
-(function (ResponseOfferSnapshot_Result) {
-    /** UNKNOWN - Unknown result, abort all snapshot restoration */
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["UNKNOWN"] = 0] = "UNKNOWN";
-    /** ACCEPT - Snapshot accepted, apply chunks */
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["ACCEPT"] = 1] = "ACCEPT";
-    /** ABORT - Abort all snapshot restoration */
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["ABORT"] = 2] = "ABORT";
-    /** REJECT - Reject this specific snapshot, try others */
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT"] = 3] = "REJECT";
-    /** REJECT_FORMAT - Reject all snapshots of this format, try others */
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT_FORMAT"] = 4] = "REJECT_FORMAT";
-    /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT_SENDER"] = 5] = "REJECT_SENDER";
-    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
-})(ResponseOfferSnapshot_Result || (ResponseOfferSnapshot_Result = {}));
-export const ResponseOfferSnapshot_ResultSDKType = ResponseOfferSnapshot_Result;
-export function responseOfferSnapshot_ResultFromJSON(object) {
-    switch (object) {
-        case 0:
-        case 'UNKNOWN':
-            return ResponseOfferSnapshot_Result.UNKNOWN;
-        case 1:
-        case 'ACCEPT':
-            return ResponseOfferSnapshot_Result.ACCEPT;
-        case 2:
-        case 'ABORT':
-            return ResponseOfferSnapshot_Result.ABORT;
-        case 3:
-        case 'REJECT':
-            return ResponseOfferSnapshot_Result.REJECT;
-        case 4:
-        case 'REJECT_FORMAT':
-            return ResponseOfferSnapshot_Result.REJECT_FORMAT;
-        case 5:
-        case 'REJECT_SENDER':
-            return ResponseOfferSnapshot_Result.REJECT_SENDER;
-        case -1:
-        case 'UNRECOGNIZED':
-        default:
-            return ResponseOfferSnapshot_Result.UNRECOGNIZED;
-    }
-}
-export function responseOfferSnapshot_ResultToJSON(object) {
-    switch (object) {
-        case ResponseOfferSnapshot_Result.UNKNOWN:
-            return 'UNKNOWN';
-        case ResponseOfferSnapshot_Result.ACCEPT:
-            return 'ACCEPT';
-        case ResponseOfferSnapshot_Result.ABORT:
-            return 'ABORT';
-        case ResponseOfferSnapshot_Result.REJECT:
-            return 'REJECT';
-        case ResponseOfferSnapshot_Result.REJECT_FORMAT:
-            return 'REJECT_FORMAT';
-        case ResponseOfferSnapshot_Result.REJECT_SENDER:
-            return 'REJECT_SENDER';
-        case ResponseOfferSnapshot_Result.UNRECOGNIZED:
-        default:
-            return 'UNRECOGNIZED';
-    }
-}
-export var ResponseApplySnapshotChunk_Result;
-(function (ResponseApplySnapshotChunk_Result) {
-    /** UNKNOWN - Unknown result, abort all snapshot restoration */
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["UNKNOWN"] = 0] = "UNKNOWN";
-    /** ACCEPT - Chunk successfully accepted */
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["ACCEPT"] = 1] = "ACCEPT";
-    /** ABORT - Abort all snapshot restoration */
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["ABORT"] = 2] = "ABORT";
-    /** RETRY - Retry chunk (combine with refetch and reject) */
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["RETRY"] = 3] = "RETRY";
-    /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["RETRY_SNAPSHOT"] = 4] = "RETRY_SNAPSHOT";
-    /** REJECT_SNAPSHOT - Reject this snapshot, try others */
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["REJECT_SNAPSHOT"] = 5] = "REJECT_SNAPSHOT";
-    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
-})(ResponseApplySnapshotChunk_Result || (ResponseApplySnapshotChunk_Result = {}));
-export const ResponseApplySnapshotChunk_ResultSDKType = ResponseApplySnapshotChunk_Result;
-export function responseApplySnapshotChunk_ResultFromJSON(object) {
-    switch (object) {
-        case 0:
-        case 'UNKNOWN':
-            return ResponseApplySnapshotChunk_Result.UNKNOWN;
-        case 1:
-        case 'ACCEPT':
-            return ResponseApplySnapshotChunk_Result.ACCEPT;
-        case 2:
-        case 'ABORT':
-            return ResponseApplySnapshotChunk_Result.ABORT;
-        case 3:
-        case 'RETRY':
-            return ResponseApplySnapshotChunk_Result.RETRY;
-        case 4:
-        case 'RETRY_SNAPSHOT':
-            return ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT;
-        case 5:
-        case 'REJECT_SNAPSHOT':
-            return ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT;
-        case -1:
-        case 'UNRECOGNIZED':
-        default:
-            return ResponseApplySnapshotChunk_Result.UNRECOGNIZED;
-    }
-}
-export function responseApplySnapshotChunk_ResultToJSON(object) {
-    switch (object) {
-        case ResponseApplySnapshotChunk_Result.UNKNOWN:
-            return 'UNKNOWN';
-        case ResponseApplySnapshotChunk_Result.ACCEPT:
-            return 'ACCEPT';
-        case ResponseApplySnapshotChunk_Result.ABORT:
-            return 'ABORT';
-        case ResponseApplySnapshotChunk_Result.RETRY:
-            return 'RETRY';
-        case ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT:
-            return 'RETRY_SNAPSHOT';
-        case ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT:
-            return 'REJECT_SNAPSHOT';
-        case ResponseApplySnapshotChunk_Result.UNRECOGNIZED:
-        default:
-            return 'UNRECOGNIZED';
-    }
-}
-export var EvidenceType;
-(function (EvidenceType) {
-    EvidenceType[EvidenceType["UNKNOWN"] = 0] = "UNKNOWN";
-    EvidenceType[EvidenceType["DUPLICATE_VOTE"] = 1] = "DUPLICATE_VOTE";
-    EvidenceType[EvidenceType["LIGHT_CLIENT_ATTACK"] = 2] = "LIGHT_CLIENT_ATTACK";
-    EvidenceType[EvidenceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
-})(EvidenceType || (EvidenceType = {}));
-export const EvidenceTypeSDKType = EvidenceType;
-export function evidenceTypeFromJSON(object) {
-    switch (object) {
-        case 0:
-        case 'UNKNOWN':
-            return EvidenceType.UNKNOWN;
-        case 1:
-        case 'DUPLICATE_VOTE':
-            return EvidenceType.DUPLICATE_VOTE;
-        case 2:
-        case 'LIGHT_CLIENT_ATTACK':
-            return EvidenceType.LIGHT_CLIENT_ATTACK;
-        case -1:
-        case 'UNRECOGNIZED':
-        default:
-            return EvidenceType.UNRECOGNIZED;
-    }
-}
-export function evidenceTypeToJSON(object) {
-    switch (object) {
-        case EvidenceType.UNKNOWN:
-            return 'UNKNOWN';
-        case EvidenceType.DUPLICATE_VOTE:
-            return 'DUPLICATE_VOTE';
-        case EvidenceType.LIGHT_CLIENT_ATTACK:
-            return 'LIGHT_CLIENT_ATTACK';
-        case EvidenceType.UNRECOGNIZED:
-        default:
-            return 'UNRECOGNIZED';
-    }
-}
-function createBaseRequest() {
-    return {
-        echo: undefined,
-        flush: undefined,
-        info: undefined,
-        setOption: undefined,
-        initChain: undefined,
-        query: undefined,
-        beginBlock: undefined,
-        checkTx: undefined,
-        deliverTx: undefined,
-        endBlock: undefined,
-        commit: undefined,
-        listSnapshots: undefined,
-        offerSnapshot: undefined,
-        loadSnapshotChunk: undefined,
-        applySnapshotChunk: undefined,
-    };
-}
-export const Request = {
-    typeUrl: '/tendermint.abci.Request',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.echo !== undefined) {
-            RequestEcho.encode(message.echo, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.flush !== undefined) {
-            RequestFlush.encode(message.flush, writer.uint32(18).fork()).ldelim();
-        }
-        if (message.info !== undefined) {
-            RequestInfo.encode(message.info, writer.uint32(26).fork()).ldelim();
-        }
-        if (message.setOption !== undefined) {
-            RequestSetOption.encode(message.setOption, writer.uint32(34).fork()).ldelim();
-        }
-        if (message.initChain !== undefined) {
-            RequestInitChain.encode(message.initChain, writer.uint32(42).fork()).ldelim();
-        }
-        if (message.query !== undefined) {
-            RequestQuery.encode(message.query, writer.uint32(50).fork()).ldelim();
-        }
-        if (message.beginBlock !== undefined) {
-            RequestBeginBlock.encode(message.beginBlock, writer.uint32(58).fork()).ldelim();
-        }
-        if (message.checkTx !== undefined) {
-            RequestCheckTx.encode(message.checkTx, writer.uint32(66).fork()).ldelim();
-        }
-        if (message.deliverTx !== undefined) {
-            RequestDeliverTx.encode(message.deliverTx, writer.uint32(74).fork()).ldelim();
-        }
-        if (message.endBlock !== undefined) {
-            RequestEndBlock.encode(message.endBlock, writer.uint32(82).fork()).ldelim();
-        }
-        if (message.commit !== undefined) {
-            RequestCommit.encode(message.commit, writer.uint32(90).fork()).ldelim();
-        }
-        if (message.listSnapshots !== undefined) {
-            RequestListSnapshots.encode(message.listSnapshots, writer.uint32(98).fork()).ldelim();
-        }
-        if (message.offerSnapshot !== undefined) {
-            RequestOfferSnapshot.encode(message.offerSnapshot, writer.uint32(106).fork()).ldelim();
-        }
-        if (message.loadSnapshotChunk !== undefined) {
-            RequestLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(114).fork()).ldelim();
-        }
-        if (message.applySnapshotChunk !== undefined) {
-            RequestApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(122).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequest();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.echo = RequestEcho.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.flush = RequestFlush.decode(reader, reader.uint32());
-                    break;
-                case 3:
-                    message.info = RequestInfo.decode(reader, reader.uint32());
-                    break;
-                case 4:
-                    message.setOption = RequestSetOption.decode(reader, reader.uint32());
-                    break;
-                case 5:
-                    message.initChain = RequestInitChain.decode(reader, reader.uint32());
-                    break;
-                case 6:
-                    message.query = RequestQuery.decode(reader, reader.uint32());
-                    break;
-                case 7:
-                    message.beginBlock = RequestBeginBlock.decode(reader, reader.uint32());
-                    break;
-                case 8:
-                    message.checkTx = RequestCheckTx.decode(reader, reader.uint32());
-                    break;
-                case 9:
-                    message.deliverTx = RequestDeliverTx.decode(reader, reader.uint32());
-                    break;
-                case 10:
-                    message.endBlock = RequestEndBlock.decode(reader, reader.uint32());
-                    break;
-                case 11:
-                    message.commit = RequestCommit.decode(reader, reader.uint32());
-                    break;
-                case 12:
-                    message.listSnapshots = RequestListSnapshots.decode(reader, reader.uint32());
-                    break;
-                case 13:
-                    message.offerSnapshot = RequestOfferSnapshot.decode(reader, reader.uint32());
-                    break;
-                case 14:
-                    message.loadSnapshotChunk = RequestLoadSnapshotChunk.decode(reader, reader.uint32());
-                    break;
-                case 15:
-                    message.applySnapshotChunk = RequestApplySnapshotChunk.decode(reader, reader.uint32());
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            echo: isSet(object.echo) ? RequestEcho.fromJSON(object.echo) : undefined,
-            flush: isSet(object.flush)
-                ? RequestFlush.fromJSON(object.flush)
-                : undefined,
-            info: isSet(object.info) ? RequestInfo.fromJSON(object.info) : undefined,
-            setOption: isSet(object.setOption)
-                ? RequestSetOption.fromJSON(object.setOption)
-                : undefined,
-            initChain: isSet(object.initChain)
-                ? RequestInitChain.fromJSON(object.initChain)
-                : undefined,
-            query: isSet(object.query)
-                ? RequestQuery.fromJSON(object.query)
-                : undefined,
-            beginBlock: isSet(object.beginBlock)
-                ? RequestBeginBlock.fromJSON(object.beginBlock)
-                : undefined,
-            checkTx: isSet(object.checkTx)
-                ? RequestCheckTx.fromJSON(object.checkTx)
-                : undefined,
-            deliverTx: isSet(object.deliverTx)
-                ? RequestDeliverTx.fromJSON(object.deliverTx)
-                : undefined,
-            endBlock: isSet(object.endBlock)
-                ? RequestEndBlock.fromJSON(object.endBlock)
-                : undefined,
-            commit: isSet(object.commit)
-                ? RequestCommit.fromJSON(object.commit)
-                : undefined,
-            listSnapshots: isSet(object.listSnapshots)
-                ? RequestListSnapshots.fromJSON(object.listSnapshots)
-                : undefined,
-            offerSnapshot: isSet(object.offerSnapshot)
-                ? RequestOfferSnapshot.fromJSON(object.offerSnapshot)
-                : undefined,
-            loadSnapshotChunk: isSet(object.loadSnapshotChunk)
-                ? RequestLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk)
-                : undefined,
-            applySnapshotChunk: isSet(object.applySnapshotChunk)
-                ? RequestApplySnapshotChunk.fromJSON(object.applySnapshotChunk)
-                : undefined,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.echo !== undefined &&
-            (obj.echo = message.echo ? RequestEcho.toJSON(message.echo) : undefined);
-        message.flush !== undefined &&
-            (obj.flush = message.flush
-                ? RequestFlush.toJSON(message.flush)
-                : undefined);
-        message.info !== undefined &&
-            (obj.info = message.info ? RequestInfo.toJSON(message.info) : undefined);
-        message.setOption !== undefined &&
-            (obj.setOption = message.setOption
-                ? RequestSetOption.toJSON(message.setOption)
-                : undefined);
-        message.initChain !== undefined &&
-            (obj.initChain = message.initChain
-                ? RequestInitChain.toJSON(message.initChain)
-                : undefined);
-        message.query !== undefined &&
-            (obj.query = message.query
-                ? RequestQuery.toJSON(message.query)
-                : undefined);
-        message.beginBlock !== undefined &&
-            (obj.beginBlock = message.beginBlock
-                ? RequestBeginBlock.toJSON(message.beginBlock)
-                : undefined);
-        message.checkTx !== undefined &&
-            (obj.checkTx = message.checkTx
-                ? RequestCheckTx.toJSON(message.checkTx)
-                : undefined);
-        message.deliverTx !== undefined &&
-            (obj.deliverTx = message.deliverTx
-                ? RequestDeliverTx.toJSON(message.deliverTx)
-                : undefined);
-        message.endBlock !== undefined &&
-            (obj.endBlock = message.endBlock
-                ? RequestEndBlock.toJSON(message.endBlock)
-                : undefined);
-        message.commit !== undefined &&
-            (obj.commit = message.commit
-                ? RequestCommit.toJSON(message.commit)
-                : undefined);
-        message.listSnapshots !== undefined &&
-            (obj.listSnapshots = message.listSnapshots
-                ? RequestListSnapshots.toJSON(message.listSnapshots)
-                : undefined);
-        message.offerSnapshot !== undefined &&
-            (obj.offerSnapshot = message.offerSnapshot
-                ? RequestOfferSnapshot.toJSON(message.offerSnapshot)
-                : undefined);
-        message.loadSnapshotChunk !== undefined &&
-            (obj.loadSnapshotChunk = message.loadSnapshotChunk
-                ? RequestLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)
-                : undefined);
-        message.applySnapshotChunk !== undefined &&
-            (obj.applySnapshotChunk = message.applySnapshotChunk
-                ? RequestApplySnapshotChunk.toJSON(message.applySnapshotChunk)
-                : undefined);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequest();
-        message.echo =
-            object.echo !== undefined && object.echo !== null
-                ? RequestEcho.fromPartial(object.echo)
-                : undefined;
-        message.flush =
-            object.flush !== undefined && object.flush !== null
-                ? RequestFlush.fromPartial(object.flush)
-                : undefined;
-        message.info =
-            object.info !== undefined && object.info !== null
-                ? RequestInfo.fromPartial(object.info)
-                : undefined;
-        message.setOption =
-            object.setOption !== undefined && object.setOption !== null
-                ? RequestSetOption.fromPartial(object.setOption)
-                : undefined;
-        message.initChain =
-            object.initChain !== undefined && object.initChain !== null
-                ? RequestInitChain.fromPartial(object.initChain)
-                : undefined;
-        message.query =
-            object.query !== undefined && object.query !== null
-                ? RequestQuery.fromPartial(object.query)
-                : undefined;
-        message.beginBlock =
-            object.beginBlock !== undefined && object.beginBlock !== null
-                ? RequestBeginBlock.fromPartial(object.beginBlock)
-                : undefined;
-        message.checkTx =
-            object.checkTx !== undefined && object.checkTx !== null
-                ? RequestCheckTx.fromPartial(object.checkTx)
-                : undefined;
-        message.deliverTx =
-            object.deliverTx !== undefined && object.deliverTx !== null
-                ? RequestDeliverTx.fromPartial(object.deliverTx)
-                : undefined;
-        message.endBlock =
-            object.endBlock !== undefined && object.endBlock !== null
-                ? RequestEndBlock.fromPartial(object.endBlock)
-                : undefined;
-        message.commit =
-            object.commit !== undefined && object.commit !== null
-                ? RequestCommit.fromPartial(object.commit)
-                : undefined;
-        message.listSnapshots =
-            object.listSnapshots !== undefined && object.listSnapshots !== null
-                ? RequestListSnapshots.fromPartial(object.listSnapshots)
-                : undefined;
-        message.offerSnapshot =
-            object.offerSnapshot !== undefined && object.offerSnapshot !== null
-                ? RequestOfferSnapshot.fromPartial(object.offerSnapshot)
-                : undefined;
-        message.loadSnapshotChunk =
-            object.loadSnapshotChunk !== undefined &&
-                object.loadSnapshotChunk !== null
-                ? RequestLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk)
-                : undefined;
-        message.applySnapshotChunk =
-            object.applySnapshotChunk !== undefined &&
-                object.applySnapshotChunk !== null
-                ? RequestApplySnapshotChunk.fromPartial(object.applySnapshotChunk)
-                : undefined;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return Request.decode(message.value);
-    },
-    toProto(message) {
-        return Request.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.Request',
-            value: Request.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestEcho() {
-    return {
-        message: '',
-    };
-}
-export const RequestEcho = {
-    typeUrl: '/tendermint.abci.RequestEcho',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.message !== '') {
-            writer.uint32(10).string(message.message);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestEcho();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.message = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            message: isSet(object.message) ? String(object.message) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.message !== undefined && (obj.message = message.message);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestEcho();
-        message.message = object.message ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestEcho.decode(message.value);
-    },
-    toProto(message) {
-        return RequestEcho.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestEcho',
-            value: RequestEcho.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestFlush() {
-    return {};
-}
-export const RequestFlush = {
-    typeUrl: '/tendermint.abci.RequestFlush',
-    encode(_, writer = BinaryWriter.create()) {
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestFlush();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(_) {
-        return {};
-    },
-    toJSON(_) {
-        const obj = {};
-        return obj;
-    },
-    fromPartial(_) {
-        const message = createBaseRequestFlush();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestFlush.decode(message.value);
-    },
-    toProto(message) {
-        return RequestFlush.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestFlush',
-            value: RequestFlush.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestInfo() {
-    return {
-        version: '',
-        blockVersion: BigInt(0),
-        p2pVersion: BigInt(0),
-    };
-}
-export const RequestInfo = {
-    typeUrl: '/tendermint.abci.RequestInfo',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.version !== '') {
-            writer.uint32(10).string(message.version);
-        }
-        if (message.blockVersion !== BigInt(0)) {
-            writer.uint32(16).uint64(message.blockVersion);
-        }
-        if (message.p2pVersion !== BigInt(0)) {
-            writer.uint32(24).uint64(message.p2pVersion);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestInfo();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.version = reader.string();
-                    break;
-                case 2:
-                    message.blockVersion = reader.uint64();
-                    break;
-                case 3:
-                    message.p2pVersion = reader.uint64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            version: isSet(object.version) ? String(object.version) : '',
-            blockVersion: isSet(object.blockVersion)
-                ? BigInt(object.blockVersion.toString())
-                : BigInt(0),
-            p2pVersion: isSet(object.p2pVersion)
-                ? BigInt(object.p2pVersion.toString())
-                : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.version !== undefined && (obj.version = message.version);
-        message.blockVersion !== undefined &&
-            (obj.blockVersion = (message.blockVersion || BigInt(0)).toString());
-        message.p2pVersion !== undefined &&
-            (obj.p2pVersion = (message.p2pVersion || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestInfo();
-        message.version = object.version ?? '';
-        message.blockVersion =
-            object.blockVersion !== undefined && object.blockVersion !== null
-                ? BigInt(object.blockVersion.toString())
-                : BigInt(0);
-        message.p2pVersion =
-            object.p2pVersion !== undefined && object.p2pVersion !== null
-                ? BigInt(object.p2pVersion.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestInfo.decode(message.value);
-    },
-    toProto(message) {
-        return RequestInfo.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestInfo',
-            value: RequestInfo.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestSetOption() {
-    return {
-        key: '',
-        value: '',
-    };
-}
-export const RequestSetOption = {
-    typeUrl: '/tendermint.abci.RequestSetOption',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.key !== '') {
-            writer.uint32(10).string(message.key);
-        }
-        if (message.value !== '') {
-            writer.uint32(18).string(message.value);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestSetOption();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.key = reader.string();
-                    break;
-                case 2:
-                    message.value = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            key: isSet(object.key) ? String(object.key) : '',
-            value: isSet(object.value) ? String(object.value) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.key !== undefined && (obj.key = message.key);
-        message.value !== undefined && (obj.value = message.value);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestSetOption();
-        message.key = object.key ?? '';
-        message.value = object.value ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestSetOption.decode(message.value);
-    },
-    toProto(message) {
-        return RequestSetOption.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestSetOption',
-            value: RequestSetOption.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestInitChain() {
-    return {
-        time: Timestamp.fromPartial({}),
-        chainId: '',
-        consensusParams: undefined,
-        validators: [],
-        appStateBytes: new Uint8Array(),
-        initialHeight: BigInt(0),
-    };
-}
-export const RequestInitChain = {
-    typeUrl: '/tendermint.abci.RequestInitChain',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.time !== undefined) {
-            Timestamp.encode(message.time, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.chainId !== '') {
-            writer.uint32(18).string(message.chainId);
-        }
-        if (message.consensusParams !== undefined) {
-            ConsensusParams.encode(message.consensusParams, writer.uint32(26).fork()).ldelim();
-        }
-        for (const v of message.validators) {
-            ValidatorUpdate.encode(v, writer.uint32(34).fork()).ldelim();
-        }
-        if (message.appStateBytes.length !== 0) {
-            writer.uint32(42).bytes(message.appStateBytes);
-        }
-        if (message.initialHeight !== BigInt(0)) {
-            writer.uint32(48).int64(message.initialHeight);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestInitChain();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.time = Timestamp.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.chainId = reader.string();
-                    break;
-                case 3:
-                    message.consensusParams = ConsensusParams.decode(reader, reader.uint32());
-                    break;
-                case 4:
-                    message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
-                    break;
-                case 5:
-                    message.appStateBytes = reader.bytes();
-                    break;
-                case 6:
-                    message.initialHeight = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
-            chainId: isSet(object.chainId) ? String(object.chainId) : '',
-            consensusParams: isSet(object.consensusParams)
-                ? ConsensusParams.fromJSON(object.consensusParams)
-                : undefined,
-            validators: Array.isArray(object?.validators)
-                ? object.validators.map((e) => ValidatorUpdate.fromJSON(e))
-                : [],
-            appStateBytes: isSet(object.appStateBytes)
-                ? bytesFromBase64(object.appStateBytes)
-                : new Uint8Array(),
-            initialHeight: isSet(object.initialHeight)
-                ? BigInt(object.initialHeight.toString())
-                : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.time !== undefined &&
-            (obj.time = fromTimestamp(message.time).toISOString());
-        message.chainId !== undefined && (obj.chainId = message.chainId);
-        message.consensusParams !== undefined &&
-            (obj.consensusParams = message.consensusParams
-                ? ConsensusParams.toJSON(message.consensusParams)
-                : undefined);
-        if (message.validators) {
-            obj.validators = message.validators.map(e => e ? ValidatorUpdate.toJSON(e) : undefined);
-        }
-        else {
-            obj.validators = [];
-        }
-        message.appStateBytes !== undefined &&
-            (obj.appStateBytes = base64FromBytes(message.appStateBytes !== undefined
-                ? message.appStateBytes
-                : new Uint8Array()));
-        message.initialHeight !== undefined &&
-            (obj.initialHeight = (message.initialHeight || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestInitChain();
-        message.time =
-            object.time !== undefined && object.time !== null
-                ? Timestamp.fromPartial(object.time)
-                : undefined;
-        message.chainId = object.chainId ?? '';
-        message.consensusParams =
-            object.consensusParams !== undefined && object.consensusParams !== null
-                ? ConsensusParams.fromPartial(object.consensusParams)
-                : undefined;
-        message.validators =
-            object.validators?.map(e => ValidatorUpdate.fromPartial(e)) || [];
-        message.appStateBytes = object.appStateBytes ?? new Uint8Array();
-        message.initialHeight =
-            object.initialHeight !== undefined && object.initialHeight !== null
-                ? BigInt(object.initialHeight.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestInitChain.decode(message.value);
-    },
-    toProto(message) {
-        return RequestInitChain.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestInitChain',
-            value: RequestInitChain.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestQuery() {
-    return {
-        data: new Uint8Array(),
-        path: '',
-        height: BigInt(0),
-        prove: false,
-    };
-}
-export const RequestQuery = {
-    typeUrl: '/tendermint.abci.RequestQuery',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.data.length !== 0) {
-            writer.uint32(10).bytes(message.data);
-        }
-        if (message.path !== '') {
-            writer.uint32(18).string(message.path);
-        }
-        if (message.height !== BigInt(0)) {
-            writer.uint32(24).int64(message.height);
-        }
-        if (message.prove === true) {
-            writer.uint32(32).bool(message.prove);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestQuery();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.data = reader.bytes();
-                    break;
-                case 2:
-                    message.path = reader.string();
-                    break;
-                case 3:
-                    message.height = reader.int64();
-                    break;
-                case 4:
-                    message.prove = reader.bool();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            data: isSet(object.data)
-                ? bytesFromBase64(object.data)
-                : new Uint8Array(),
-            path: isSet(object.path) ? String(object.path) : '',
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-            prove: isSet(object.prove) ? Boolean(object.prove) : false,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.data !== undefined &&
-            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
-        message.path !== undefined && (obj.path = message.path);
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        message.prove !== undefined && (obj.prove = message.prove);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestQuery();
-        message.data = object.data ?? new Uint8Array();
-        message.path = object.path ?? '';
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        message.prove = object.prove ?? false;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestQuery.decode(message.value);
-    },
-    toProto(message) {
-        return RequestQuery.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestQuery',
-            value: RequestQuery.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestBeginBlock() {
-    return {
-        hash: new Uint8Array(),
-        header: Header.fromPartial({}),
-        lastCommitInfo: LastCommitInfo.fromPartial({}),
-        byzantineValidators: [],
-    };
-}
-export const RequestBeginBlock = {
-    typeUrl: '/tendermint.abci.RequestBeginBlock',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.hash.length !== 0) {
-            writer.uint32(10).bytes(message.hash);
-        }
-        if (message.header !== undefined) {
-            Header.encode(message.header, writer.uint32(18).fork()).ldelim();
-        }
-        if (message.lastCommitInfo !== undefined) {
-            LastCommitInfo.encode(message.lastCommitInfo, writer.uint32(26).fork()).ldelim();
-        }
-        for (const v of message.byzantineValidators) {
-            Evidence.encode(v, writer.uint32(34).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestBeginBlock();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.hash = reader.bytes();
-                    break;
-                case 2:
-                    message.header = Header.decode(reader, reader.uint32());
-                    break;
-                case 3:
-                    message.lastCommitInfo = LastCommitInfo.decode(reader, reader.uint32());
-                    break;
-                case 4:
-                    message.byzantineValidators.push(Evidence.decode(reader, reader.uint32()));
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            hash: isSet(object.hash)
-                ? bytesFromBase64(object.hash)
-                : new Uint8Array(),
-            header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,
-            lastCommitInfo: isSet(object.lastCommitInfo)
-                ? LastCommitInfo.fromJSON(object.lastCommitInfo)
-                : undefined,
-            byzantineValidators: Array.isArray(object?.byzantineValidators)
-                ? object.byzantineValidators.map((e) => Evidence.fromJSON(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.hash !== undefined &&
-            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));
-        message.header !== undefined &&
-            (obj.header = message.header ? Header.toJSON(message.header) : undefined);
-        message.lastCommitInfo !== undefined &&
-            (obj.lastCommitInfo = message.lastCommitInfo
-                ? LastCommitInfo.toJSON(message.lastCommitInfo)
-                : undefined);
-        if (message.byzantineValidators) {
-            obj.byzantineValidators = message.byzantineValidators.map(e => e ? Evidence.toJSON(e) : undefined);
-        }
-        else {
-            obj.byzantineValidators = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestBeginBlock();
-        message.hash = object.hash ?? new Uint8Array();
-        message.header =
-            object.header !== undefined && object.header !== null
-                ? Header.fromPartial(object.header)
-                : undefined;
-        message.lastCommitInfo =
-            object.lastCommitInfo !== undefined && object.lastCommitInfo !== null
-                ? LastCommitInfo.fromPartial(object.lastCommitInfo)
-                : undefined;
-        message.byzantineValidators =
-            object.byzantineValidators?.map(e => Evidence.fromPartial(e)) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestBeginBlock.decode(message.value);
-    },
-    toProto(message) {
-        return RequestBeginBlock.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestBeginBlock',
-            value: RequestBeginBlock.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestCheckTx() {
-    return {
-        tx: new Uint8Array(),
-        type: 0,
-    };
-}
-export const RequestCheckTx = {
-    typeUrl: '/tendermint.abci.RequestCheckTx',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.tx.length !== 0) {
-            writer.uint32(10).bytes(message.tx);
-        }
-        if (message.type !== 0) {
-            writer.uint32(16).int32(message.type);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestCheckTx();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.tx = reader.bytes();
-                    break;
-                case 2:
-                    message.type = reader.int32();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(),
-            type: isSet(object.type) ? checkTxTypeFromJSON(object.type) : -1,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.tx !== undefined &&
-            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));
-        message.type !== undefined && (obj.type = checkTxTypeToJSON(message.type));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestCheckTx();
-        message.tx = object.tx ?? new Uint8Array();
-        message.type = object.type ?? 0;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestCheckTx.decode(message.value);
-    },
-    toProto(message) {
-        return RequestCheckTx.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestCheckTx',
-            value: RequestCheckTx.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestDeliverTx() {
-    return {
-        tx: new Uint8Array(),
-    };
-}
-export const RequestDeliverTx = {
-    typeUrl: '/tendermint.abci.RequestDeliverTx',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.tx.length !== 0) {
-            writer.uint32(10).bytes(message.tx);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestDeliverTx();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.tx = reader.bytes();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.tx !== undefined &&
-            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestDeliverTx();
-        message.tx = object.tx ?? new Uint8Array();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestDeliverTx.decode(message.value);
-    },
-    toProto(message) {
-        return RequestDeliverTx.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestDeliverTx',
-            value: RequestDeliverTx.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestEndBlock() {
-    return {
-        height: BigInt(0),
-    };
-}
-export const RequestEndBlock = {
-    typeUrl: '/tendermint.abci.RequestEndBlock',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.height !== BigInt(0)) {
-            writer.uint32(8).int64(message.height);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestEndBlock();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.height = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestEndBlock();
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestEndBlock.decode(message.value);
-    },
-    toProto(message) {
-        return RequestEndBlock.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestEndBlock',
-            value: RequestEndBlock.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestCommit() {
-    return {};
-}
-export const RequestCommit = {
-    typeUrl: '/tendermint.abci.RequestCommit',
-    encode(_, writer = BinaryWriter.create()) {
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestCommit();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(_) {
-        return {};
-    },
-    toJSON(_) {
-        const obj = {};
-        return obj;
-    },
-    fromPartial(_) {
-        const message = createBaseRequestCommit();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestCommit.decode(message.value);
-    },
-    toProto(message) {
-        return RequestCommit.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestCommit',
-            value: RequestCommit.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestListSnapshots() {
-    return {};
-}
-export const RequestListSnapshots = {
-    typeUrl: '/tendermint.abci.RequestListSnapshots',
-    encode(_, writer = BinaryWriter.create()) {
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestListSnapshots();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(_) {
-        return {};
-    },
-    toJSON(_) {
-        const obj = {};
-        return obj;
-    },
-    fromPartial(_) {
-        const message = createBaseRequestListSnapshots();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestListSnapshots.decode(message.value);
-    },
-    toProto(message) {
-        return RequestListSnapshots.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestListSnapshots',
-            value: RequestListSnapshots.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestOfferSnapshot() {
-    return {
-        snapshot: undefined,
-        appHash: new Uint8Array(),
-    };
-}
-export const RequestOfferSnapshot = {
-    typeUrl: '/tendermint.abci.RequestOfferSnapshot',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.snapshot !== undefined) {
-            Snapshot.encode(message.snapshot, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.appHash.length !== 0) {
-            writer.uint32(18).bytes(message.appHash);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestOfferSnapshot();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.snapshot = Snapshot.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.appHash = reader.bytes();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            snapshot: isSet(object.snapshot)
-                ? Snapshot.fromJSON(object.snapshot)
-                : undefined,
-            appHash: isSet(object.appHash)
-                ? bytesFromBase64(object.appHash)
-                : new Uint8Array(),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.snapshot !== undefined &&
-            (obj.snapshot = message.snapshot
-                ? Snapshot.toJSON(message.snapshot)
-                : undefined);
-        message.appHash !== undefined &&
-            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestOfferSnapshot();
-        message.snapshot =
-            object.snapshot !== undefined && object.snapshot !== null
-                ? Snapshot.fromPartial(object.snapshot)
-                : undefined;
-        message.appHash = object.appHash ?? new Uint8Array();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestOfferSnapshot.decode(message.value);
-    },
-    toProto(message) {
-        return RequestOfferSnapshot.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestOfferSnapshot',
-            value: RequestOfferSnapshot.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestLoadSnapshotChunk() {
-    return {
-        height: BigInt(0),
-        format: 0,
-        chunk: 0,
-    };
-}
-export const RequestLoadSnapshotChunk = {
-    typeUrl: '/tendermint.abci.RequestLoadSnapshotChunk',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.height !== BigInt(0)) {
-            writer.uint32(8).uint64(message.height);
-        }
-        if (message.format !== 0) {
-            writer.uint32(16).uint32(message.format);
-        }
-        if (message.chunk !== 0) {
-            writer.uint32(24).uint32(message.chunk);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestLoadSnapshotChunk();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.height = reader.uint64();
-                    break;
-                case 2:
-                    message.format = reader.uint32();
-                    break;
-                case 3:
-                    message.chunk = reader.uint32();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-            format: isSet(object.format) ? Number(object.format) : 0,
-            chunk: isSet(object.chunk) ? Number(object.chunk) : 0,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        message.format !== undefined && (obj.format = Math.round(message.format));
-        message.chunk !== undefined && (obj.chunk = Math.round(message.chunk));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestLoadSnapshotChunk();
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        message.format = object.format ?? 0;
-        message.chunk = object.chunk ?? 0;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestLoadSnapshotChunk.decode(message.value);
-    },
-    toProto(message) {
-        return RequestLoadSnapshotChunk.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestLoadSnapshotChunk',
-            value: RequestLoadSnapshotChunk.encode(message).finish(),
-        };
-    },
-};
-function createBaseRequestApplySnapshotChunk() {
-    return {
-        index: 0,
-        chunk: new Uint8Array(),
-        sender: '',
-    };
-}
-export const RequestApplySnapshotChunk = {
-    typeUrl: '/tendermint.abci.RequestApplySnapshotChunk',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.index !== 0) {
-            writer.uint32(8).uint32(message.index);
-        }
-        if (message.chunk.length !== 0) {
-            writer.uint32(18).bytes(message.chunk);
-        }
-        if (message.sender !== '') {
-            writer.uint32(26).string(message.sender);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseRequestApplySnapshotChunk();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.index = reader.uint32();
-                    break;
-                case 2:
-                    message.chunk = reader.bytes();
-                    break;
-                case 3:
-                    message.sender = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            index: isSet(object.index) ? Number(object.index) : 0,
-            chunk: isSet(object.chunk)
-                ? bytesFromBase64(object.chunk)
-                : new Uint8Array(),
-            sender: isSet(object.sender) ? String(object.sender) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.index !== undefined && (obj.index = Math.round(message.index));
-        message.chunk !== undefined &&
-            (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));
-        message.sender !== undefined && (obj.sender = message.sender);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseRequestApplySnapshotChunk();
-        message.index = object.index ?? 0;
-        message.chunk = object.chunk ?? new Uint8Array();
-        message.sender = object.sender ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return RequestApplySnapshotChunk.decode(message.value);
-    },
-    toProto(message) {
-        return RequestApplySnapshotChunk.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.RequestApplySnapshotChunk',
-            value: RequestApplySnapshotChunk.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponse() {
-    return {
-        exception: undefined,
-        echo: undefined,
-        flush: undefined,
-        info: undefined,
-        setOption: undefined,
-        initChain: undefined,
-        query: undefined,
-        beginBlock: undefined,
-        checkTx: undefined,
-        deliverTx: undefined,
-        endBlock: undefined,
-        commit: undefined,
-        listSnapshots: undefined,
-        offerSnapshot: undefined,
-        loadSnapshotChunk: undefined,
-        applySnapshotChunk: undefined,
-    };
-}
-export const Response = {
-    typeUrl: '/tendermint.abci.Response',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.exception !== undefined) {
-            ResponseException.encode(message.exception, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.echo !== undefined) {
-            ResponseEcho.encode(message.echo, writer.uint32(18).fork()).ldelim();
-        }
-        if (message.flush !== undefined) {
-            ResponseFlush.encode(message.flush, writer.uint32(26).fork()).ldelim();
-        }
-        if (message.info !== undefined) {
-            ResponseInfo.encode(message.info, writer.uint32(34).fork()).ldelim();
-        }
-        if (message.setOption !== undefined) {
-            ResponseSetOption.encode(message.setOption, writer.uint32(42).fork()).ldelim();
-        }
-        if (message.initChain !== undefined) {
-            ResponseInitChain.encode(message.initChain, writer.uint32(50).fork()).ldelim();
-        }
-        if (message.query !== undefined) {
-            ResponseQuery.encode(message.query, writer.uint32(58).fork()).ldelim();
-        }
-        if (message.beginBlock !== undefined) {
-            ResponseBeginBlock.encode(message.beginBlock, writer.uint32(66).fork()).ldelim();
-        }
-        if (message.checkTx !== undefined) {
-            ResponseCheckTx.encode(message.checkTx, writer.uint32(74).fork()).ldelim();
-        }
-        if (message.deliverTx !== undefined) {
-            ResponseDeliverTx.encode(message.deliverTx, writer.uint32(82).fork()).ldelim();
-        }
-        if (message.endBlock !== undefined) {
-            ResponseEndBlock.encode(message.endBlock, writer.uint32(90).fork()).ldelim();
-        }
-        if (message.commit !== undefined) {
-            ResponseCommit.encode(message.commit, writer.uint32(98).fork()).ldelim();
-        }
-        if (message.listSnapshots !== undefined) {
-            ResponseListSnapshots.encode(message.listSnapshots, writer.uint32(106).fork()).ldelim();
-        }
-        if (message.offerSnapshot !== undefined) {
-            ResponseOfferSnapshot.encode(message.offerSnapshot, writer.uint32(114).fork()).ldelim();
-        }
-        if (message.loadSnapshotChunk !== undefined) {
-            ResponseLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(122).fork()).ldelim();
-        }
-        if (message.applySnapshotChunk !== undefined) {
-            ResponseApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(130).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponse();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.exception = ResponseException.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.echo = ResponseEcho.decode(reader, reader.uint32());
-                    break;
-                case 3:
-                    message.flush = ResponseFlush.decode(reader, reader.uint32());
-                    break;
-                case 4:
-                    message.info = ResponseInfo.decode(reader, reader.uint32());
-                    break;
-                case 5:
-                    message.setOption = ResponseSetOption.decode(reader, reader.uint32());
-                    break;
-                case 6:
-                    message.initChain = ResponseInitChain.decode(reader, reader.uint32());
-                    break;
-                case 7:
-                    message.query = ResponseQuery.decode(reader, reader.uint32());
-                    break;
-                case 8:
-                    message.beginBlock = ResponseBeginBlock.decode(reader, reader.uint32());
-                    break;
-                case 9:
-                    message.checkTx = ResponseCheckTx.decode(reader, reader.uint32());
-                    break;
-                case 10:
-                    message.deliverTx = ResponseDeliverTx.decode(reader, reader.uint32());
-                    break;
-                case 11:
-                    message.endBlock = ResponseEndBlock.decode(reader, reader.uint32());
-                    break;
-                case 12:
-                    message.commit = ResponseCommit.decode(reader, reader.uint32());
-                    break;
-                case 13:
-                    message.listSnapshots = ResponseListSnapshots.decode(reader, reader.uint32());
-                    break;
-                case 14:
-                    message.offerSnapshot = ResponseOfferSnapshot.decode(reader, reader.uint32());
-                    break;
-                case 15:
-                    message.loadSnapshotChunk = ResponseLoadSnapshotChunk.decode(reader, reader.uint32());
-                    break;
-                case 16:
-                    message.applySnapshotChunk = ResponseApplySnapshotChunk.decode(reader, reader.uint32());
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            exception: isSet(object.exception)
-                ? ResponseException.fromJSON(object.exception)
-                : undefined,
-            echo: isSet(object.echo) ? ResponseEcho.fromJSON(object.echo) : undefined,
-            flush: isSet(object.flush)
-                ? ResponseFlush.fromJSON(object.flush)
-                : undefined,
-            info: isSet(object.info) ? ResponseInfo.fromJSON(object.info) : undefined,
-            setOption: isSet(object.setOption)
-                ? ResponseSetOption.fromJSON(object.setOption)
-                : undefined,
-            initChain: isSet(object.initChain)
-                ? ResponseInitChain.fromJSON(object.initChain)
-                : undefined,
-            query: isSet(object.query)
-                ? ResponseQuery.fromJSON(object.query)
-                : undefined,
-            beginBlock: isSet(object.beginBlock)
-                ? ResponseBeginBlock.fromJSON(object.beginBlock)
-                : undefined,
-            checkTx: isSet(object.checkTx)
-                ? ResponseCheckTx.fromJSON(object.checkTx)
-                : undefined,
-            deliverTx: isSet(object.deliverTx)
-                ? ResponseDeliverTx.fromJSON(object.deliverTx)
-                : undefined,
-            endBlock: isSet(object.endBlock)
-                ? ResponseEndBlock.fromJSON(object.endBlock)
-                : undefined,
-            commit: isSet(object.commit)
-                ? ResponseCommit.fromJSON(object.commit)
-                : undefined,
-            listSnapshots: isSet(object.listSnapshots)
-                ? ResponseListSnapshots.fromJSON(object.listSnapshots)
-                : undefined,
-            offerSnapshot: isSet(object.offerSnapshot)
-                ? ResponseOfferSnapshot.fromJSON(object.offerSnapshot)
-                : undefined,
-            loadSnapshotChunk: isSet(object.loadSnapshotChunk)
-                ? ResponseLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk)
-                : undefined,
-            applySnapshotChunk: isSet(object.applySnapshotChunk)
-                ? ResponseApplySnapshotChunk.fromJSON(object.applySnapshotChunk)
-                : undefined,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.exception !== undefined &&
-            (obj.exception = message.exception
-                ? ResponseException.toJSON(message.exception)
-                : undefined);
-        message.echo !== undefined &&
-            (obj.echo = message.echo ? ResponseEcho.toJSON(message.echo) : undefined);
-        message.flush !== undefined &&
-            (obj.flush = message.flush
-                ? ResponseFlush.toJSON(message.flush)
-                : undefined);
-        message.info !== undefined &&
-            (obj.info = message.info ? ResponseInfo.toJSON(message.info) : undefined);
-        message.setOption !== undefined &&
-            (obj.setOption = message.setOption
-                ? ResponseSetOption.toJSON(message.setOption)
-                : undefined);
-        message.initChain !== undefined &&
-            (obj.initChain = message.initChain
-                ? ResponseInitChain.toJSON(message.initChain)
-                : undefined);
-        message.query !== undefined &&
-            (obj.query = message.query
-                ? ResponseQuery.toJSON(message.query)
-                : undefined);
-        message.beginBlock !== undefined &&
-            (obj.beginBlock = message.beginBlock
-                ? ResponseBeginBlock.toJSON(message.beginBlock)
-                : undefined);
-        message.checkTx !== undefined &&
-            (obj.checkTx = message.checkTx
-                ? ResponseCheckTx.toJSON(message.checkTx)
-                : undefined);
-        message.deliverTx !== undefined &&
-            (obj.deliverTx = message.deliverTx
-                ? ResponseDeliverTx.toJSON(message.deliverTx)
-                : undefined);
-        message.endBlock !== undefined &&
-            (obj.endBlock = message.endBlock
-                ? ResponseEndBlock.toJSON(message.endBlock)
-                : undefined);
-        message.commit !== undefined &&
-            (obj.commit = message.commit
-                ? ResponseCommit.toJSON(message.commit)
-                : undefined);
-        message.listSnapshots !== undefined &&
-            (obj.listSnapshots = message.listSnapshots
-                ? ResponseListSnapshots.toJSON(message.listSnapshots)
-                : undefined);
-        message.offerSnapshot !== undefined &&
-            (obj.offerSnapshot = message.offerSnapshot
-                ? ResponseOfferSnapshot.toJSON(message.offerSnapshot)
-                : undefined);
-        message.loadSnapshotChunk !== undefined &&
-            (obj.loadSnapshotChunk = message.loadSnapshotChunk
-                ? ResponseLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)
-                : undefined);
-        message.applySnapshotChunk !== undefined &&
-            (obj.applySnapshotChunk = message.applySnapshotChunk
-                ? ResponseApplySnapshotChunk.toJSON(message.applySnapshotChunk)
-                : undefined);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponse();
-        message.exception =
-            object.exception !== undefined && object.exception !== null
-                ? ResponseException.fromPartial(object.exception)
-                : undefined;
-        message.echo =
-            object.echo !== undefined && object.echo !== null
-                ? ResponseEcho.fromPartial(object.echo)
-                : undefined;
-        message.flush =
-            object.flush !== undefined && object.flush !== null
-                ? ResponseFlush.fromPartial(object.flush)
-                : undefined;
-        message.info =
-            object.info !== undefined && object.info !== null
-                ? ResponseInfo.fromPartial(object.info)
-                : undefined;
-        message.setOption =
-            object.setOption !== undefined && object.setOption !== null
-                ? ResponseSetOption.fromPartial(object.setOption)
-                : undefined;
-        message.initChain =
-            object.initChain !== undefined && object.initChain !== null
-                ? ResponseInitChain.fromPartial(object.initChain)
-                : undefined;
-        message.query =
-            object.query !== undefined && object.query !== null
-                ? ResponseQuery.fromPartial(object.query)
-                : undefined;
-        message.beginBlock =
-            object.beginBlock !== undefined && object.beginBlock !== null
-                ? ResponseBeginBlock.fromPartial(object.beginBlock)
-                : undefined;
-        message.checkTx =
-            object.checkTx !== undefined && object.checkTx !== null
-                ? ResponseCheckTx.fromPartial(object.checkTx)
-                : undefined;
-        message.deliverTx =
-            object.deliverTx !== undefined && object.deliverTx !== null
-                ? ResponseDeliverTx.fromPartial(object.deliverTx)
-                : undefined;
-        message.endBlock =
-            object.endBlock !== undefined && object.endBlock !== null
-                ? ResponseEndBlock.fromPartial(object.endBlock)
-                : undefined;
-        message.commit =
-            object.commit !== undefined && object.commit !== null
-                ? ResponseCommit.fromPartial(object.commit)
-                : undefined;
-        message.listSnapshots =
-            object.listSnapshots !== undefined && object.listSnapshots !== null
-                ? ResponseListSnapshots.fromPartial(object.listSnapshots)
-                : undefined;
-        message.offerSnapshot =
-            object.offerSnapshot !== undefined && object.offerSnapshot !== null
-                ? ResponseOfferSnapshot.fromPartial(object.offerSnapshot)
-                : undefined;
-        message.loadSnapshotChunk =
-            object.loadSnapshotChunk !== undefined &&
-                object.loadSnapshotChunk !== null
-                ? ResponseLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk)
-                : undefined;
-        message.applySnapshotChunk =
-            object.applySnapshotChunk !== undefined &&
-                object.applySnapshotChunk !== null
-                ? ResponseApplySnapshotChunk.fromPartial(object.applySnapshotChunk)
-                : undefined;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return Response.decode(message.value);
-    },
-    toProto(message) {
-        return Response.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.Response',
-            value: Response.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseException() {
-    return {
-        error: '',
-    };
-}
-export const ResponseException = {
-    typeUrl: '/tendermint.abci.ResponseException',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.error !== '') {
-            writer.uint32(10).string(message.error);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseException();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.error = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            error: isSet(object.error) ? String(object.error) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.error !== undefined && (obj.error = message.error);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseException();
-        message.error = object.error ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseException.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseException.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseException',
-            value: ResponseException.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseEcho() {
-    return {
-        message: '',
-    };
-}
-export const ResponseEcho = {
-    typeUrl: '/tendermint.abci.ResponseEcho',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.message !== '') {
-            writer.uint32(10).string(message.message);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseEcho();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.message = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            message: isSet(object.message) ? String(object.message) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.message !== undefined && (obj.message = message.message);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseEcho();
-        message.message = object.message ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseEcho.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseEcho.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseEcho',
-            value: ResponseEcho.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseFlush() {
-    return {};
-}
-export const ResponseFlush = {
-    typeUrl: '/tendermint.abci.ResponseFlush',
-    encode(_, writer = BinaryWriter.create()) {
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseFlush();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(_) {
-        return {};
-    },
-    toJSON(_) {
-        const obj = {};
-        return obj;
-    },
-    fromPartial(_) {
-        const message = createBaseResponseFlush();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseFlush.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseFlush.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseFlush',
-            value: ResponseFlush.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseInfo() {
-    return {
-        data: '',
-        version: '',
-        appVersion: BigInt(0),
-        lastBlockHeight: BigInt(0),
-        lastBlockAppHash: new Uint8Array(),
-    };
-}
-export const ResponseInfo = {
-    typeUrl: '/tendermint.abci.ResponseInfo',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.data !== '') {
-            writer.uint32(10).string(message.data);
-        }
-        if (message.version !== '') {
-            writer.uint32(18).string(message.version);
-        }
-        if (message.appVersion !== BigInt(0)) {
-            writer.uint32(24).uint64(message.appVersion);
-        }
-        if (message.lastBlockHeight !== BigInt(0)) {
-            writer.uint32(32).int64(message.lastBlockHeight);
-        }
-        if (message.lastBlockAppHash.length !== 0) {
-            writer.uint32(42).bytes(message.lastBlockAppHash);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseInfo();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.data = reader.string();
-                    break;
-                case 2:
-                    message.version = reader.string();
-                    break;
-                case 3:
-                    message.appVersion = reader.uint64();
-                    break;
-                case 4:
-                    message.lastBlockHeight = reader.int64();
-                    break;
-                case 5:
-                    message.lastBlockAppHash = reader.bytes();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            data: isSet(object.data) ? String(object.data) : '',
-            version: isSet(object.version) ? String(object.version) : '',
-            appVersion: isSet(object.appVersion)
-                ? BigInt(object.appVersion.toString())
-                : BigInt(0),
-            lastBlockHeight: isSet(object.lastBlockHeight)
-                ? BigInt(object.lastBlockHeight.toString())
-                : BigInt(0),
-            lastBlockAppHash: isSet(object.lastBlockAppHash)
-                ? bytesFromBase64(object.lastBlockAppHash)
-                : new Uint8Array(),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.data !== undefined && (obj.data = message.data);
-        message.version !== undefined && (obj.version = message.version);
-        message.appVersion !== undefined &&
-            (obj.appVersion = (message.appVersion || BigInt(0)).toString());
-        message.lastBlockHeight !== undefined &&
-            (obj.lastBlockHeight = (message.lastBlockHeight || BigInt(0)).toString());
-        message.lastBlockAppHash !== undefined &&
-            (obj.lastBlockAppHash = base64FromBytes(message.lastBlockAppHash !== undefined
-                ? message.lastBlockAppHash
-                : new Uint8Array()));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseInfo();
-        message.data = object.data ?? '';
-        message.version = object.version ?? '';
-        message.appVersion =
-            object.appVersion !== undefined && object.appVersion !== null
-                ? BigInt(object.appVersion.toString())
-                : BigInt(0);
-        message.lastBlockHeight =
-            object.lastBlockHeight !== undefined && object.lastBlockHeight !== null
-                ? BigInt(object.lastBlockHeight.toString())
-                : BigInt(0);
-        message.lastBlockAppHash = object.lastBlockAppHash ?? new Uint8Array();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseInfo.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseInfo.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseInfo',
-            value: ResponseInfo.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseSetOption() {
-    return {
-        code: 0,
-        log: '',
-        info: '',
-    };
-}
-export const ResponseSetOption = {
-    typeUrl: '/tendermint.abci.ResponseSetOption',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.code !== 0) {
-            writer.uint32(8).uint32(message.code);
-        }
-        if (message.log !== '') {
-            writer.uint32(26).string(message.log);
-        }
-        if (message.info !== '') {
-            writer.uint32(34).string(message.info);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseSetOption();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.code = reader.uint32();
-                    break;
-                case 3:
-                    message.log = reader.string();
-                    break;
-                case 4:
-                    message.info = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            code: isSet(object.code) ? Number(object.code) : 0,
-            log: isSet(object.log) ? String(object.log) : '',
-            info: isSet(object.info) ? String(object.info) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.code !== undefined && (obj.code = Math.round(message.code));
-        message.log !== undefined && (obj.log = message.log);
-        message.info !== undefined && (obj.info = message.info);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseSetOption();
-        message.code = object.code ?? 0;
-        message.log = object.log ?? '';
-        message.info = object.info ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseSetOption.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseSetOption.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseSetOption',
-            value: ResponseSetOption.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseInitChain() {
-    return {
-        consensusParams: undefined,
-        validators: [],
-        appHash: new Uint8Array(),
-    };
-}
-export const ResponseInitChain = {
-    typeUrl: '/tendermint.abci.ResponseInitChain',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.consensusParams !== undefined) {
-            ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).ldelim();
-        }
-        for (const v of message.validators) {
-            ValidatorUpdate.encode(v, writer.uint32(18).fork()).ldelim();
-        }
-        if (message.appHash.length !== 0) {
-            writer.uint32(26).bytes(message.appHash);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseInitChain();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.consensusParams = ConsensusParams.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
-                    break;
-                case 3:
-                    message.appHash = reader.bytes();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            consensusParams: isSet(object.consensusParams)
-                ? ConsensusParams.fromJSON(object.consensusParams)
-                : undefined,
-            validators: Array.isArray(object?.validators)
-                ? object.validators.map((e) => ValidatorUpdate.fromJSON(e))
-                : [],
-            appHash: isSet(object.appHash)
-                ? bytesFromBase64(object.appHash)
-                : new Uint8Array(),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.consensusParams !== undefined &&
-            (obj.consensusParams = message.consensusParams
-                ? ConsensusParams.toJSON(message.consensusParams)
-                : undefined);
-        if (message.validators) {
-            obj.validators = message.validators.map(e => e ? ValidatorUpdate.toJSON(e) : undefined);
-        }
-        else {
-            obj.validators = [];
-        }
-        message.appHash !== undefined &&
-            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseInitChain();
-        message.consensusParams =
-            object.consensusParams !== undefined && object.consensusParams !== null
-                ? ConsensusParams.fromPartial(object.consensusParams)
-                : undefined;
-        message.validators =
-            object.validators?.map(e => ValidatorUpdate.fromPartial(e)) || [];
-        message.appHash = object.appHash ?? new Uint8Array();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseInitChain.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseInitChain.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseInitChain',
-            value: ResponseInitChain.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseQuery() {
-    return {
-        code: 0,
-        log: '',
-        info: '',
-        index: BigInt(0),
-        key: new Uint8Array(),
-        value: new Uint8Array(),
-        proofOps: undefined,
-        height: BigInt(0),
-        codespace: '',
-    };
-}
-export const ResponseQuery = {
-    typeUrl: '/tendermint.abci.ResponseQuery',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.code !== 0) {
-            writer.uint32(8).uint32(message.code);
-        }
-        if (message.log !== '') {
-            writer.uint32(26).string(message.log);
-        }
-        if (message.info !== '') {
-            writer.uint32(34).string(message.info);
-        }
-        if (message.index !== BigInt(0)) {
-            writer.uint32(40).int64(message.index);
-        }
-        if (message.key.length !== 0) {
-            writer.uint32(50).bytes(message.key);
-        }
-        if (message.value.length !== 0) {
-            writer.uint32(58).bytes(message.value);
-        }
-        if (message.proofOps !== undefined) {
-            ProofOps.encode(message.proofOps, writer.uint32(66).fork()).ldelim();
-        }
-        if (message.height !== BigInt(0)) {
-            writer.uint32(72).int64(message.height);
-        }
-        if (message.codespace !== '') {
-            writer.uint32(82).string(message.codespace);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseQuery();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.code = reader.uint32();
-                    break;
-                case 3:
-                    message.log = reader.string();
-                    break;
-                case 4:
-                    message.info = reader.string();
-                    break;
-                case 5:
-                    message.index = reader.int64();
-                    break;
-                case 6:
-                    message.key = reader.bytes();
-                    break;
-                case 7:
-                    message.value = reader.bytes();
-                    break;
-                case 8:
-                    message.proofOps = ProofOps.decode(reader, reader.uint32());
-                    break;
-                case 9:
-                    message.height = reader.int64();
-                    break;
-                case 10:
-                    message.codespace = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            code: isSet(object.code) ? Number(object.code) : 0,
-            log: isSet(object.log) ? String(object.log) : '',
-            info: isSet(object.info) ? String(object.info) : '',
-            index: isSet(object.index) ? BigInt(object.index.toString()) : BigInt(0),
-            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),
-            value: isSet(object.value)
-                ? bytesFromBase64(object.value)
-                : new Uint8Array(),
-            proofOps: isSet(object.proofOps)
-                ? ProofOps.fromJSON(object.proofOps)
-                : undefined,
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-            codespace: isSet(object.codespace) ? String(object.codespace) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.code !== undefined && (obj.code = Math.round(message.code));
-        message.log !== undefined && (obj.log = message.log);
-        message.info !== undefined && (obj.info = message.info);
-        message.index !== undefined &&
-            (obj.index = (message.index || BigInt(0)).toString());
-        message.key !== undefined &&
-            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));
-        message.value !== undefined &&
-            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
-        message.proofOps !== undefined &&
-            (obj.proofOps = message.proofOps
-                ? ProofOps.toJSON(message.proofOps)
-                : undefined);
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        message.codespace !== undefined && (obj.codespace = message.codespace);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseQuery();
-        message.code = object.code ?? 0;
-        message.log = object.log ?? '';
-        message.info = object.info ?? '';
-        message.index =
-            object.index !== undefined && object.index !== null
-                ? BigInt(object.index.toString())
-                : BigInt(0);
-        message.key = object.key ?? new Uint8Array();
-        message.value = object.value ?? new Uint8Array();
-        message.proofOps =
-            object.proofOps !== undefined && object.proofOps !== null
-                ? ProofOps.fromPartial(object.proofOps)
-                : undefined;
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        message.codespace = object.codespace ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseQuery.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseQuery.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseQuery',
-            value: ResponseQuery.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseBeginBlock() {
-    return {
-        events: [],
-    };
-}
-export const ResponseBeginBlock = {
-    typeUrl: '/tendermint.abci.ResponseBeginBlock',
-    encode(message, writer = BinaryWriter.create()) {
-        for (const v of message.events) {
-            Event.encode(v, writer.uint32(10).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseBeginBlock();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.events.push(Event.decode(reader, reader.uint32()));
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            events: Array.isArray(object?.events)
-                ? object.events.map((e) => Event.fromJSON(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        if (message.events) {
-            obj.events = message.events.map(e => (e ? Event.toJSON(e) : undefined));
-        }
-        else {
-            obj.events = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseBeginBlock();
-        message.events = object.events?.map(e => Event.fromPartial(e)) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseBeginBlock.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseBeginBlock.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseBeginBlock',
-            value: ResponseBeginBlock.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseCheckTx() {
-    return {
-        code: 0,
-        data: new Uint8Array(),
-        log: '',
-        info: '',
-        gasWanted: BigInt(0),
-        gasUsed: BigInt(0),
-        events: [],
-        codespace: '',
-    };
-}
-export const ResponseCheckTx = {
-    typeUrl: '/tendermint.abci.ResponseCheckTx',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.code !== 0) {
-            writer.uint32(8).uint32(message.code);
-        }
-        if (message.data.length !== 0) {
-            writer.uint32(18).bytes(message.data);
-        }
-        if (message.log !== '') {
-            writer.uint32(26).string(message.log);
-        }
-        if (message.info !== '') {
-            writer.uint32(34).string(message.info);
-        }
-        if (message.gasWanted !== BigInt(0)) {
-            writer.uint32(40).int64(message.gasWanted);
-        }
-        if (message.gasUsed !== BigInt(0)) {
-            writer.uint32(48).int64(message.gasUsed);
-        }
-        for (const v of message.events) {
-            Event.encode(v, writer.uint32(58).fork()).ldelim();
-        }
-        if (message.codespace !== '') {
-            writer.uint32(66).string(message.codespace);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseCheckTx();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.code = reader.uint32();
-                    break;
-                case 2:
-                    message.data = reader.bytes();
-                    break;
-                case 3:
-                    message.log = reader.string();
-                    break;
-                case 4:
-                    message.info = reader.string();
-                    break;
-                case 5:
-                    message.gasWanted = reader.int64();
-                    break;
-                case 6:
-                    message.gasUsed = reader.int64();
-                    break;
-                case 7:
-                    message.events.push(Event.decode(reader, reader.uint32()));
-                    break;
-                case 8:
-                    message.codespace = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            code: isSet(object.code) ? Number(object.code) : 0,
-            data: isSet(object.data)
-                ? bytesFromBase64(object.data)
-                : new Uint8Array(),
-            log: isSet(object.log) ? String(object.log) : '',
-            info: isSet(object.info) ? String(object.info) : '',
-            gasWanted: isSet(object.gas_wanted)
-                ? BigInt(object.gas_wanted.toString())
-                : BigInt(0),
-            gasUsed: isSet(object.gas_used)
-                ? BigInt(object.gas_used.toString())
-                : BigInt(0),
-            events: Array.isArray(object?.events)
-                ? object.events.map((e) => Event.fromJSON(e))
-                : [],
-            codespace: isSet(object.codespace) ? String(object.codespace) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.code !== undefined && (obj.code = Math.round(message.code));
-        message.data !== undefined &&
-            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
-        message.log !== undefined && (obj.log = message.log);
-        message.info !== undefined && (obj.info = message.info);
-        message.gasWanted !== undefined &&
-            (obj.gas_wanted = (message.gasWanted || BigInt(0)).toString());
-        message.gasUsed !== undefined &&
-            (obj.gas_used = (message.gasUsed || BigInt(0)).toString());
-        if (message.events) {
-            obj.events = message.events.map(e => (e ? Event.toJSON(e) : undefined));
-        }
-        else {
-            obj.events = [];
-        }
-        message.codespace !== undefined && (obj.codespace = message.codespace);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseCheckTx();
-        message.code = object.code ?? 0;
-        message.data = object.data ?? new Uint8Array();
-        message.log = object.log ?? '';
-        message.info = object.info ?? '';
-        message.gasWanted =
-            object.gasWanted !== undefined && object.gasWanted !== null
-                ? BigInt(object.gasWanted.toString())
-                : BigInt(0);
-        message.gasUsed =
-            object.gasUsed !== undefined && object.gasUsed !== null
-                ? BigInt(object.gasUsed.toString())
-                : BigInt(0);
-        message.events = object.events?.map(e => Event.fromPartial(e)) || [];
-        message.codespace = object.codespace ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseCheckTx.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseCheckTx.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseCheckTx',
-            value: ResponseCheckTx.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseDeliverTx() {
-    return {
-        code: 0,
-        data: new Uint8Array(),
-        log: '',
-        info: '',
-        gasWanted: BigInt(0),
-        gasUsed: BigInt(0),
-        events: [],
-        codespace: '',
-    };
-}
-export const ResponseDeliverTx = {
-    typeUrl: '/tendermint.abci.ResponseDeliverTx',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.code !== 0) {
-            writer.uint32(8).uint32(message.code);
-        }
-        if (message.data.length !== 0) {
-            writer.uint32(18).bytes(message.data);
-        }
-        if (message.log !== '') {
-            writer.uint32(26).string(message.log);
-        }
-        if (message.info !== '') {
-            writer.uint32(34).string(message.info);
-        }
-        if (message.gasWanted !== BigInt(0)) {
-            writer.uint32(40).int64(message.gasWanted);
-        }
-        if (message.gasUsed !== BigInt(0)) {
-            writer.uint32(48).int64(message.gasUsed);
-        }
-        for (const v of message.events) {
-            Event.encode(v, writer.uint32(58).fork()).ldelim();
-        }
-        if (message.codespace !== '') {
-            writer.uint32(66).string(message.codespace);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseDeliverTx();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.code = reader.uint32();
-                    break;
-                case 2:
-                    message.data = reader.bytes();
-                    break;
-                case 3:
-                    message.log = reader.string();
-                    break;
-                case 4:
-                    message.info = reader.string();
-                    break;
-                case 5:
-                    message.gasWanted = reader.int64();
-                    break;
-                case 6:
-                    message.gasUsed = reader.int64();
-                    break;
-                case 7:
-                    message.events.push(Event.decode(reader, reader.uint32()));
-                    break;
-                case 8:
-                    message.codespace = reader.string();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            code: isSet(object.code) ? Number(object.code) : 0,
-            data: isSet(object.data)
-                ? bytesFromBase64(object.data)
-                : new Uint8Array(),
-            log: isSet(object.log) ? String(object.log) : '',
-            info: isSet(object.info) ? String(object.info) : '',
-            gasWanted: isSet(object.gas_wanted)
-                ? BigInt(object.gas_wanted.toString())
-                : BigInt(0),
-            gasUsed: isSet(object.gas_used)
-                ? BigInt(object.gas_used.toString())
-                : BigInt(0),
-            events: Array.isArray(object?.events)
-                ? object.events.map((e) => Event.fromJSON(e))
-                : [],
-            codespace: isSet(object.codespace) ? String(object.codespace) : '',
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.code !== undefined && (obj.code = Math.round(message.code));
-        message.data !== undefined &&
-            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
-        message.log !== undefined && (obj.log = message.log);
-        message.info !== undefined && (obj.info = message.info);
-        message.gasWanted !== undefined &&
-            (obj.gas_wanted = (message.gasWanted || BigInt(0)).toString());
-        message.gasUsed !== undefined &&
-            (obj.gas_used = (message.gasUsed || BigInt(0)).toString());
-        if (message.events) {
-            obj.events = message.events.map(e => (e ? Event.toJSON(e) : undefined));
-        }
-        else {
-            obj.events = [];
-        }
-        message.codespace !== undefined && (obj.codespace = message.codespace);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseDeliverTx();
-        message.code = object.code ?? 0;
-        message.data = object.data ?? new Uint8Array();
-        message.log = object.log ?? '';
-        message.info = object.info ?? '';
-        message.gasWanted =
-            object.gasWanted !== undefined && object.gasWanted !== null
-                ? BigInt(object.gasWanted.toString())
-                : BigInt(0);
-        message.gasUsed =
-            object.gasUsed !== undefined && object.gasUsed !== null
-                ? BigInt(object.gasUsed.toString())
-                : BigInt(0);
-        message.events = object.events?.map(e => Event.fromPartial(e)) || [];
-        message.codespace = object.codespace ?? '';
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseDeliverTx.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseDeliverTx.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseDeliverTx',
-            value: ResponseDeliverTx.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseEndBlock() {
-    return {
-        validatorUpdates: [],
-        consensusParamUpdates: undefined,
-        events: [],
-    };
-}
-export const ResponseEndBlock = {
-    typeUrl: '/tendermint.abci.ResponseEndBlock',
-    encode(message, writer = BinaryWriter.create()) {
-        for (const v of message.validatorUpdates) {
-            ValidatorUpdate.encode(v, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.consensusParamUpdates !== undefined) {
-            ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(18).fork()).ldelim();
-        }
-        for (const v of message.events) {
-            Event.encode(v, writer.uint32(26).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseEndBlock();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.validatorUpdates.push(ValidatorUpdate.decode(reader, reader.uint32()));
-                    break;
-                case 2:
-                    message.consensusParamUpdates = ConsensusParams.decode(reader, reader.uint32());
-                    break;
-                case 3:
-                    message.events.push(Event.decode(reader, reader.uint32()));
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            validatorUpdates: Array.isArray(object?.validatorUpdates)
-                ? object.validatorUpdates.map((e) => ValidatorUpdate.fromJSON(e))
-                : [],
-            consensusParamUpdates: isSet(object.consensusParamUpdates)
-                ? ConsensusParams.fromJSON(object.consensusParamUpdates)
-                : undefined,
-            events: Array.isArray(object?.events)
-                ? object.events.map((e) => Event.fromJSON(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        if (message.validatorUpdates) {
-            obj.validatorUpdates = message.validatorUpdates.map(e => e ? ValidatorUpdate.toJSON(e) : undefined);
-        }
-        else {
-            obj.validatorUpdates = [];
-        }
-        message.consensusParamUpdates !== undefined &&
-            (obj.consensusParamUpdates = message.consensusParamUpdates
-                ? ConsensusParams.toJSON(message.consensusParamUpdates)
-                : undefined);
-        if (message.events) {
-            obj.events = message.events.map(e => (e ? Event.toJSON(e) : undefined));
-        }
-        else {
-            obj.events = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseEndBlock();
-        message.validatorUpdates =
-            object.validatorUpdates?.map(e => ValidatorUpdate.fromPartial(e)) || [];
-        message.consensusParamUpdates =
-            object.consensusParamUpdates !== undefined &&
-                object.consensusParamUpdates !== null
-                ? ConsensusParams.fromPartial(object.consensusParamUpdates)
-                : undefined;
-        message.events = object.events?.map(e => Event.fromPartial(e)) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseEndBlock.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseEndBlock.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseEndBlock',
-            value: ResponseEndBlock.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseCommit() {
-    return {
-        data: new Uint8Array(),
-        retainHeight: BigInt(0),
-    };
-}
-export const ResponseCommit = {
-    typeUrl: '/tendermint.abci.ResponseCommit',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.data.length !== 0) {
-            writer.uint32(18).bytes(message.data);
-        }
-        if (message.retainHeight !== BigInt(0)) {
-            writer.uint32(24).int64(message.retainHeight);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseCommit();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 2:
-                    message.data = reader.bytes();
-                    break;
-                case 3:
-                    message.retainHeight = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            data: isSet(object.data)
-                ? bytesFromBase64(object.data)
-                : new Uint8Array(),
-            retainHeight: isSet(object.retainHeight)
-                ? BigInt(object.retainHeight.toString())
-                : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.data !== undefined &&
-            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
-        message.retainHeight !== undefined &&
-            (obj.retainHeight = (message.retainHeight || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseCommit();
-        message.data = object.data ?? new Uint8Array();
-        message.retainHeight =
-            object.retainHeight !== undefined && object.retainHeight !== null
-                ? BigInt(object.retainHeight.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseCommit.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseCommit.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseCommit',
-            value: ResponseCommit.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseListSnapshots() {
-    return {
-        snapshots: [],
-    };
-}
-export const ResponseListSnapshots = {
-    typeUrl: '/tendermint.abci.ResponseListSnapshots',
-    encode(message, writer = BinaryWriter.create()) {
-        for (const v of message.snapshots) {
-            Snapshot.encode(v, writer.uint32(10).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseListSnapshots();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.snapshots.push(Snapshot.decode(reader, reader.uint32()));
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            snapshots: Array.isArray(object?.snapshots)
-                ? object.snapshots.map((e) => Snapshot.fromJSON(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        if (message.snapshots) {
-            obj.snapshots = message.snapshots.map(e => e ? Snapshot.toJSON(e) : undefined);
-        }
-        else {
-            obj.snapshots = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseListSnapshots();
-        message.snapshots =
-            object.snapshots?.map(e => Snapshot.fromPartial(e)) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseListSnapshots.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseListSnapshots.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseListSnapshots',
-            value: ResponseListSnapshots.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseOfferSnapshot() {
-    return {
-        result: 0,
-    };
-}
-export const ResponseOfferSnapshot = {
-    typeUrl: '/tendermint.abci.ResponseOfferSnapshot',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.result !== 0) {
-            writer.uint32(8).int32(message.result);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseOfferSnapshot();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.result = reader.int32();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            result: isSet(object.result)
-                ? responseOfferSnapshot_ResultFromJSON(object.result)
-                : -1,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.result !== undefined &&
-            (obj.result = responseOfferSnapshot_ResultToJSON(message.result));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseOfferSnapshot();
-        message.result = object.result ?? 0;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseOfferSnapshot.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseOfferSnapshot.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseOfferSnapshot',
-            value: ResponseOfferSnapshot.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseLoadSnapshotChunk() {
-    return {
-        chunk: new Uint8Array(),
-    };
-}
-export const ResponseLoadSnapshotChunk = {
-    typeUrl: '/tendermint.abci.ResponseLoadSnapshotChunk',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.chunk.length !== 0) {
-            writer.uint32(10).bytes(message.chunk);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseLoadSnapshotChunk();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.chunk = reader.bytes();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            chunk: isSet(object.chunk)
-                ? bytesFromBase64(object.chunk)
-                : new Uint8Array(),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.chunk !== undefined &&
-            (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseLoadSnapshotChunk();
-        message.chunk = object.chunk ?? new Uint8Array();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseLoadSnapshotChunk.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseLoadSnapshotChunk.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseLoadSnapshotChunk',
-            value: ResponseLoadSnapshotChunk.encode(message).finish(),
-        };
-    },
-};
-function createBaseResponseApplySnapshotChunk() {
-    return {
-        result: 0,
-        refetchChunks: [],
-        rejectSenders: [],
-    };
-}
-export const ResponseApplySnapshotChunk = {
-    typeUrl: '/tendermint.abci.ResponseApplySnapshotChunk',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.result !== 0) {
-            writer.uint32(8).int32(message.result);
-        }
-        writer.uint32(18).fork();
-        for (const v of message.refetchChunks) {
-            writer.uint32(v);
-        }
-        writer.ldelim();
-        for (const v of message.rejectSenders) {
-            writer.uint32(26).string(v);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseResponseApplySnapshotChunk();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.result = reader.int32();
-                    break;
-                case 2:
-                    if ((tag & 7) === 2) {
-                        const end2 = reader.uint32() + reader.pos;
-                        while (reader.pos < end2) {
-                            message.refetchChunks.push(reader.uint32());
-                        }
-                    }
-                    else {
-                        message.refetchChunks.push(reader.uint32());
-                    }
-                    break;
-                case 3:
-                    message.rejectSenders.push(reader.string());
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            result: isSet(object.result)
-                ? responseApplySnapshotChunk_ResultFromJSON(object.result)
-                : -1,
-            refetchChunks: Array.isArray(object?.refetchChunks)
-                ? object.refetchChunks.map((e) => Number(e))
-                : [],
-            rejectSenders: Array.isArray(object?.rejectSenders)
-                ? object.rejectSenders.map((e) => String(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.result !== undefined &&
-            (obj.result = responseApplySnapshotChunk_ResultToJSON(message.result));
-        if (message.refetchChunks) {
-            obj.refetchChunks = message.refetchChunks.map(e => Math.round(e));
-        }
-        else {
-            obj.refetchChunks = [];
-        }
-        if (message.rejectSenders) {
-            obj.rejectSenders = message.rejectSenders.map(e => e);
-        }
-        else {
-            obj.rejectSenders = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseResponseApplySnapshotChunk();
-        message.result = object.result ?? 0;
-        message.refetchChunks = object.refetchChunks?.map(e => e) || [];
-        message.rejectSenders = object.rejectSenders?.map(e => e) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ResponseApplySnapshotChunk.decode(message.value);
-    },
-    toProto(message) {
-        return ResponseApplySnapshotChunk.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ResponseApplySnapshotChunk',
-            value: ResponseApplySnapshotChunk.encode(message).finish(),
-        };
-    },
-};
-function createBaseConsensusParams() {
-    return {
-        block: undefined,
-        evidence: undefined,
-        validator: undefined,
-        version: undefined,
-    };
-}
-export const ConsensusParams = {
-    typeUrl: '/tendermint.abci.ConsensusParams',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.block !== undefined) {
-            BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.evidence !== undefined) {
-            EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();
-        }
-        if (message.validator !== undefined) {
-            ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();
-        }
-        if (message.version !== undefined) {
-            VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseConsensusParams();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.block = BlockParams.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.evidence = EvidenceParams.decode(reader, reader.uint32());
-                    break;
-                case 3:
-                    message.validator = ValidatorParams.decode(reader, reader.uint32());
-                    break;
-                case 4:
-                    message.version = VersionParams.decode(reader, reader.uint32());
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            block: isSet(object.block)
-                ? BlockParams.fromJSON(object.block)
-                : undefined,
-            evidence: isSet(object.evidence)
-                ? EvidenceParams.fromJSON(object.evidence)
-                : undefined,
-            validator: isSet(object.validator)
-                ? ValidatorParams.fromJSON(object.validator)
-                : undefined,
-            version: isSet(object.version)
-                ? VersionParams.fromJSON(object.version)
-                : undefined,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.block !== undefined &&
-            (obj.block = message.block
-                ? BlockParams.toJSON(message.block)
-                : undefined);
-        message.evidence !== undefined &&
-            (obj.evidence = message.evidence
-                ? EvidenceParams.toJSON(message.evidence)
-                : undefined);
-        message.validator !== undefined &&
-            (obj.validator = message.validator
-                ? ValidatorParams.toJSON(message.validator)
-                : undefined);
-        message.version !== undefined &&
-            (obj.version = message.version
-                ? VersionParams.toJSON(message.version)
-                : undefined);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseConsensusParams();
-        message.block =
-            object.block !== undefined && object.block !== null
-                ? BlockParams.fromPartial(object.block)
-                : undefined;
-        message.evidence =
-            object.evidence !== undefined && object.evidence !== null
-                ? EvidenceParams.fromPartial(object.evidence)
-                : undefined;
-        message.validator =
-            object.validator !== undefined && object.validator !== null
-                ? ValidatorParams.fromPartial(object.validator)
-                : undefined;
-        message.version =
-            object.version !== undefined && object.version !== null
-                ? VersionParams.fromPartial(object.version)
-                : undefined;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ConsensusParams.decode(message.value);
-    },
-    toProto(message) {
-        return ConsensusParams.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ConsensusParams',
-            value: ConsensusParams.encode(message).finish(),
-        };
-    },
-};
-function createBaseBlockParams() {
-    return {
-        maxBytes: BigInt(0),
-        maxGas: BigInt(0),
-    };
-}
-export const BlockParams = {
-    typeUrl: '/tendermint.abci.BlockParams',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.maxBytes !== BigInt(0)) {
-            writer.uint32(8).int64(message.maxBytes);
-        }
-        if (message.maxGas !== BigInt(0)) {
-            writer.uint32(16).int64(message.maxGas);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseBlockParams();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.maxBytes = reader.int64();
-                    break;
-                case 2:
-                    message.maxGas = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            maxBytes: isSet(object.maxBytes)
-                ? BigInt(object.maxBytes.toString())
-                : BigInt(0),
-            maxGas: isSet(object.maxGas)
-                ? BigInt(object.maxGas.toString())
-                : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.maxBytes !== undefined &&
-            (obj.maxBytes = (message.maxBytes || BigInt(0)).toString());
-        message.maxGas !== undefined &&
-            (obj.maxGas = (message.maxGas || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseBlockParams();
-        message.maxBytes =
-            object.maxBytes !== undefined && object.maxBytes !== null
-                ? BigInt(object.maxBytes.toString())
-                : BigInt(0);
-        message.maxGas =
-            object.maxGas !== undefined && object.maxGas !== null
-                ? BigInt(object.maxGas.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return BlockParams.decode(message.value);
-    },
-    toProto(message) {
-        return BlockParams.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.BlockParams',
-            value: BlockParams.encode(message).finish(),
-        };
-    },
-};
-function createBaseLastCommitInfo() {
-    return {
-        round: 0,
-        votes: [],
-    };
-}
-export const LastCommitInfo = {
-    typeUrl: '/tendermint.abci.LastCommitInfo',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.round !== 0) {
-            writer.uint32(8).int32(message.round);
-        }
-        for (const v of message.votes) {
-            VoteInfo.encode(v, writer.uint32(18).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseLastCommitInfo();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.round = reader.int32();
-                    break;
-                case 2:
-                    message.votes.push(VoteInfo.decode(reader, reader.uint32()));
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            round: isSet(object.round) ? Number(object.round) : 0,
-            votes: Array.isArray(object?.votes)
-                ? object.votes.map((e) => VoteInfo.fromJSON(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.round !== undefined && (obj.round = Math.round(message.round));
-        if (message.votes) {
-            obj.votes = message.votes.map(e => (e ? VoteInfo.toJSON(e) : undefined));
-        }
-        else {
-            obj.votes = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseLastCommitInfo();
-        message.round = object.round ?? 0;
-        message.votes = object.votes?.map(e => VoteInfo.fromPartial(e)) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return LastCommitInfo.decode(message.value);
-    },
-    toProto(message) {
-        return LastCommitInfo.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.LastCommitInfo',
-            value: LastCommitInfo.encode(message).finish(),
-        };
-    },
-};
-function createBaseEvent() {
-    return {
-        type: '',
-        attributes: [],
-    };
-}
-export const Event = {
-    typeUrl: '/tendermint.abci.Event',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.type !== '') {
-            writer.uint32(10).string(message.type);
-        }
-        for (const v of message.attributes) {
-            EventAttribute.encode(v, writer.uint32(18).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseEvent();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.type = reader.string();
-                    break;
-                case 2:
-                    message.attributes.push(EventAttribute.decode(reader, reader.uint32()));
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            type: isSet(object.type) ? String(object.type) : '',
-            attributes: Array.isArray(object?.attributes)
-                ? object.attributes.map((e) => EventAttribute.fromJSON(e))
-                : [],
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.type !== undefined && (obj.type = message.type);
-        if (message.attributes) {
-            obj.attributes = message.attributes.map(e => e ? EventAttribute.toJSON(e) : undefined);
-        }
-        else {
-            obj.attributes = [];
-        }
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseEvent();
-        message.type = object.type ?? '';
-        message.attributes =
-            object.attributes?.map(e => EventAttribute.fromPartial(e)) || [];
-        return message;
-    },
-    fromProtoMsg(message) {
-        return Event.decode(message.value);
-    },
-    toProto(message) {
-        return Event.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.Event',
-            value: Event.encode(message).finish(),
-        };
-    },
-};
-function createBaseEventAttribute() {
-    return {
-        key: new Uint8Array(),
-        value: new Uint8Array(),
-        index: false,
-    };
-}
-export const EventAttribute = {
-    typeUrl: '/tendermint.abci.EventAttribute',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.key.length !== 0) {
-            writer.uint32(10).bytes(message.key);
-        }
-        if (message.value.length !== 0) {
-            writer.uint32(18).bytes(message.value);
-        }
-        if (message.index === true) {
-            writer.uint32(24).bool(message.index);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseEventAttribute();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.key = reader.bytes();
-                    break;
-                case 2:
-                    message.value = reader.bytes();
-                    break;
-                case 3:
-                    message.index = reader.bool();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),
-            value: isSet(object.value)
-                ? bytesFromBase64(object.value)
-                : new Uint8Array(),
-            index: isSet(object.index) ? Boolean(object.index) : false,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.key !== undefined &&
-            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));
-        message.value !== undefined &&
-            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
-        message.index !== undefined && (obj.index = message.index);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseEventAttribute();
-        message.key = object.key ?? new Uint8Array();
-        message.value = object.value ?? new Uint8Array();
-        message.index = object.index ?? false;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return EventAttribute.decode(message.value);
-    },
-    toProto(message) {
-        return EventAttribute.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.EventAttribute',
-            value: EventAttribute.encode(message).finish(),
-        };
-    },
-};
-function createBaseTxResult() {
-    return {
-        height: BigInt(0),
-        index: 0,
-        tx: new Uint8Array(),
-        result: ResponseDeliverTx.fromPartial({}),
-    };
-}
-export const TxResult = {
-    typeUrl: '/tendermint.abci.TxResult',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.height !== BigInt(0)) {
-            writer.uint32(8).int64(message.height);
-        }
-        if (message.index !== 0) {
-            writer.uint32(16).uint32(message.index);
-        }
-        if (message.tx.length !== 0) {
-            writer.uint32(26).bytes(message.tx);
-        }
-        if (message.result !== undefined) {
-            ResponseDeliverTx.encode(message.result, writer.uint32(34).fork()).ldelim();
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseTxResult();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.height = reader.int64();
-                    break;
-                case 2:
-                    message.index = reader.uint32();
-                    break;
-                case 3:
-                    message.tx = reader.bytes();
-                    break;
-                case 4:
-                    message.result = ResponseDeliverTx.decode(reader, reader.uint32());
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-            index: isSet(object.index) ? Number(object.index) : 0,
-            tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(),
-            result: isSet(object.result)
-                ? ResponseDeliverTx.fromJSON(object.result)
-                : undefined,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        message.index !== undefined && (obj.index = Math.round(message.index));
-        message.tx !== undefined &&
-            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));
-        message.result !== undefined &&
-            (obj.result = message.result
-                ? ResponseDeliverTx.toJSON(message.result)
-                : undefined);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseTxResult();
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        message.index = object.index ?? 0;
-        message.tx = object.tx ?? new Uint8Array();
-        message.result =
-            object.result !== undefined && object.result !== null
-                ? ResponseDeliverTx.fromPartial(object.result)
-                : undefined;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return TxResult.decode(message.value);
-    },
-    toProto(message) {
-        return TxResult.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.TxResult',
-            value: TxResult.encode(message).finish(),
-        };
-    },
-};
-function createBaseValidator() {
-    return {
-        address: new Uint8Array(),
-        power: BigInt(0),
-    };
-}
-export const Validator = {
-    typeUrl: '/tendermint.abci.Validator',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.address.length !== 0) {
-            writer.uint32(10).bytes(message.address);
-        }
-        if (message.power !== BigInt(0)) {
-            writer.uint32(24).int64(message.power);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseValidator();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.address = reader.bytes();
-                    break;
-                case 3:
-                    message.power = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            address: isSet(object.address)
-                ? bytesFromBase64(object.address)
-                : new Uint8Array(),
-            power: isSet(object.power) ? BigInt(object.power.toString()) : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.address !== undefined &&
-            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));
-        message.power !== undefined &&
-            (obj.power = (message.power || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseValidator();
-        message.address = object.address ?? new Uint8Array();
-        message.power =
-            object.power !== undefined && object.power !== null
-                ? BigInt(object.power.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return Validator.decode(message.value);
-    },
-    toProto(message) {
-        return Validator.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.Validator',
-            value: Validator.encode(message).finish(),
-        };
-    },
-};
-function createBaseValidatorUpdate() {
-    return {
-        pubKey: PublicKey.fromPartial({}),
-        power: BigInt(0),
-    };
-}
-export const ValidatorUpdate = {
-    typeUrl: '/tendermint.abci.ValidatorUpdate',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.pubKey !== undefined) {
-            PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.power !== BigInt(0)) {
-            writer.uint32(16).int64(message.power);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseValidatorUpdate();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.pubKey = PublicKey.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.power = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            pubKey: isSet(object.pubKey)
-                ? PublicKey.fromJSON(object.pubKey)
-                : undefined,
-            power: isSet(object.power) ? BigInt(object.power.toString()) : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.pubKey !== undefined &&
-            (obj.pubKey = message.pubKey
-                ? PublicKey.toJSON(message.pubKey)
-                : undefined);
-        message.power !== undefined &&
-            (obj.power = (message.power || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseValidatorUpdate();
-        message.pubKey =
-            object.pubKey !== undefined && object.pubKey !== null
-                ? PublicKey.fromPartial(object.pubKey)
-                : undefined;
-        message.power =
-            object.power !== undefined && object.power !== null
-                ? BigInt(object.power.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return ValidatorUpdate.decode(message.value);
-    },
-    toProto(message) {
-        return ValidatorUpdate.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.ValidatorUpdate',
-            value: ValidatorUpdate.encode(message).finish(),
-        };
-    },
-};
-function createBaseVoteInfo() {
-    return {
-        validator: Validator.fromPartial({}),
-        signedLastBlock: false,
-    };
-}
-export const VoteInfo = {
-    typeUrl: '/tendermint.abci.VoteInfo',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.validator !== undefined) {
-            Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
-        }
-        if (message.signedLastBlock === true) {
-            writer.uint32(16).bool(message.signedLastBlock);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseVoteInfo();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.validator = Validator.decode(reader, reader.uint32());
-                    break;
-                case 2:
-                    message.signedLastBlock = reader.bool();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            validator: isSet(object.validator)
-                ? Validator.fromJSON(object.validator)
-                : undefined,
-            signedLastBlock: isSet(object.signedLastBlock)
-                ? Boolean(object.signedLastBlock)
-                : false,
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.validator !== undefined &&
-            (obj.validator = message.validator
-                ? Validator.toJSON(message.validator)
-                : undefined);
-        message.signedLastBlock !== undefined &&
-            (obj.signedLastBlock = message.signedLastBlock);
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseVoteInfo();
-        message.validator =
-            object.validator !== undefined && object.validator !== null
-                ? Validator.fromPartial(object.validator)
-                : undefined;
-        message.signedLastBlock = object.signedLastBlock ?? false;
-        return message;
-    },
-    fromProtoMsg(message) {
-        return VoteInfo.decode(message.value);
-    },
-    toProto(message) {
-        return VoteInfo.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.VoteInfo',
-            value: VoteInfo.encode(message).finish(),
-        };
-    },
-};
-function createBaseEvidence() {
-    return {
-        type: 0,
-        validator: Validator.fromPartial({}),
-        height: BigInt(0),
-        time: Timestamp.fromPartial({}),
-        totalVotingPower: BigInt(0),
-    };
-}
-export const Evidence = {
-    typeUrl: '/tendermint.abci.Evidence',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.type !== 0) {
-            writer.uint32(8).int32(message.type);
-        }
-        if (message.validator !== undefined) {
-            Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();
-        }
-        if (message.height !== BigInt(0)) {
-            writer.uint32(24).int64(message.height);
-        }
-        if (message.time !== undefined) {
-            Timestamp.encode(message.time, writer.uint32(34).fork()).ldelim();
-        }
-        if (message.totalVotingPower !== BigInt(0)) {
-            writer.uint32(40).int64(message.totalVotingPower);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseEvidence();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.type = reader.int32();
-                    break;
-                case 2:
-                    message.validator = Validator.decode(reader, reader.uint32());
-                    break;
-                case 3:
-                    message.height = reader.int64();
-                    break;
-                case 4:
-                    message.time = Timestamp.decode(reader, reader.uint32());
-                    break;
-                case 5:
-                    message.totalVotingPower = reader.int64();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            type: isSet(object.type) ? evidenceTypeFromJSON(object.type) : -1,
-            validator: isSet(object.validator)
-                ? Validator.fromJSON(object.validator)
-                : undefined,
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
-            totalVotingPower: isSet(object.totalVotingPower)
-                ? BigInt(object.totalVotingPower.toString())
-                : BigInt(0),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.type !== undefined && (obj.type = evidenceTypeToJSON(message.type));
-        message.validator !== undefined &&
-            (obj.validator = message.validator
-                ? Validator.toJSON(message.validator)
-                : undefined);
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        message.time !== undefined &&
-            (obj.time = fromTimestamp(message.time).toISOString());
-        message.totalVotingPower !== undefined &&
-            (obj.totalVotingPower = (message.totalVotingPower || BigInt(0)).toString());
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseEvidence();
-        message.type = object.type ?? 0;
-        message.validator =
-            object.validator !== undefined && object.validator !== null
-                ? Validator.fromPartial(object.validator)
-                : undefined;
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        message.time =
-            object.time !== undefined && object.time !== null
-                ? Timestamp.fromPartial(object.time)
-                : undefined;
-        message.totalVotingPower =
-            object.totalVotingPower !== undefined && object.totalVotingPower !== null
-                ? BigInt(object.totalVotingPower.toString())
-                : BigInt(0);
-        return message;
-    },
-    fromProtoMsg(message) {
-        return Evidence.decode(message.value);
-    },
-    toProto(message) {
-        return Evidence.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.Evidence',
-            value: Evidence.encode(message).finish(),
-        };
-    },
-};
-function createBaseSnapshot() {
-    return {
-        height: BigInt(0),
-        format: 0,
-        chunks: 0,
-        hash: new Uint8Array(),
-        metadata: new Uint8Array(),
-    };
-}
-export const Snapshot = {
-    typeUrl: '/tendermint.abci.Snapshot',
-    encode(message, writer = BinaryWriter.create()) {
-        if (message.height !== BigInt(0)) {
-            writer.uint32(8).uint64(message.height);
-        }
-        if (message.format !== 0) {
-            writer.uint32(16).uint32(message.format);
-        }
-        if (message.chunks !== 0) {
-            writer.uint32(24).uint32(message.chunks);
-        }
-        if (message.hash.length !== 0) {
-            writer.uint32(34).bytes(message.hash);
-        }
-        if (message.metadata.length !== 0) {
-            writer.uint32(42).bytes(message.metadata);
-        }
-        return writer;
-    },
-    decode(input, length) {
-        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
-        let end = length === undefined ? reader.len : reader.pos + length;
-        const message = createBaseSnapshot();
-        while (reader.pos < end) {
-            const tag = reader.uint32();
-            switch (tag >>> 3) {
-                case 1:
-                    message.height = reader.uint64();
-                    break;
-                case 2:
-                    message.format = reader.uint32();
-                    break;
-                case 3:
-                    message.chunks = reader.uint32();
-                    break;
-                case 4:
-                    message.hash = reader.bytes();
-                    break;
-                case 5:
-                    message.metadata = reader.bytes();
-                    break;
-                default:
-                    reader.skipType(tag & 7);
-                    break;
-            }
-        }
-        return message;
-    },
-    fromJSON(object) {
-        return {
-            height: isSet(object.height)
-                ? BigInt(object.height.toString())
-                : BigInt(0),
-            format: isSet(object.format) ? Number(object.format) : 0,
-            chunks: isSet(object.chunks) ? Number(object.chunks) : 0,
-            hash: isSet(object.hash)
-                ? bytesFromBase64(object.hash)
-                : new Uint8Array(),
-            metadata: isSet(object.metadata)
-                ? bytesFromBase64(object.metadata)
-                : new Uint8Array(),
-        };
-    },
-    toJSON(message) {
-        const obj = {};
-        message.height !== undefined &&
-            (obj.height = (message.height || BigInt(0)).toString());
-        message.format !== undefined && (obj.format = Math.round(message.format));
-        message.chunks !== undefined && (obj.chunks = Math.round(message.chunks));
-        message.hash !== undefined &&
-            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));
-        message.metadata !== undefined &&
-            (obj.metadata = base64FromBytes(message.metadata !== undefined ? message.metadata : new Uint8Array()));
-        return obj;
-    },
-    fromPartial(object) {
-        const message = createBaseSnapshot();
-        message.height =
-            object.height !== undefined && object.height !== null
-                ? BigInt(object.height.toString())
-                : BigInt(0);
-        message.format = object.format ?? 0;
-        message.chunks = object.chunks ?? 0;
-        message.hash = object.hash ?? new Uint8Array();
-        message.metadata = object.metadata ?? new Uint8Array();
-        return message;
-    },
-    fromProtoMsg(message) {
-        return Snapshot.decode(message.value);
-    },
-    toProto(message) {
-        return Snapshot.encode(message).finish();
-    },
-    toProtoMsg(message) {
-        return {
-            typeUrl: '/tendermint.abci.Snapshot',
-            value: Snapshot.encode(message).finish(),
-        };
-    },
-};
-//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/dist/codegen/tendermint/abci/types.js.map b/dist/codegen/tendermint/abci/types.js.map
deleted file mode 100644
index 0f5ab1f016356a92666cfc17166a9c4fa2f0b5be..0000000000000000000000000000000000000000
--- a/dist/codegen/tendermint/abci/types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/codegen/tendermint/abci/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/helpers.d.ts b/dist/helpers.d.ts
index 7634856e745e81a0776c334d82ce18b3b22fa0a1..c0dd3a24a3e9ddea4d85302b9b4477fc4ae864d6 100644
--- a/dist/helpers.d.ts
+++ b/dist/helpers.d.ts
@@ -1,4 +1,4 @@
-import { RequestQuery } from './codegen/tendermint/abci/types.js';
+
 import type { Bech32PrefixRequest, Bech32PrefixResponse } from './codegen/cosmos/auth/v1beta1/query.js';
 import type { QueryAllBalancesRequest, QueryAllBalancesResponse, QueryBalanceRequestProtoMsg } from './codegen/cosmos/bank/v1beta1/query.js';
 import type { MsgSend, MsgSendResponse } from './codegen/cosmos/bank/v1beta1/tx.js';
@@ -44,6 +44,6 @@ type TxMessageTypeUrl<Package extends string, Name extends Capitalize<string>> =
 export type ResponseTo<T extends TypedJson> = T['@type'] extends RequestTypeUrl<infer Base> ? TypedJson<`/${Base}Response`> : T['@type'] extends TxMessageTypeUrl<infer Package, infer Name> ? TypedJson<`/${Package}.Msg${Name}Response`> : TypedJson;
 export declare const typedJson: <T extends keyof Proto3Shape>(typeStr: T, obj: Proto3Shape[T]) => TypedJson<T>;
 export declare const typeUrlToGrpcPath: (typeUrl: Any["typeUrl"]) => string;
-type RequestQueryOpts = Partial<Omit<RequestQuery, 'path' | 'data'>>;
-export declare const toRequestQueryJson: (msg: Any | QueryBalanceRequestProtoMsg, opts?: RequestQueryOpts) => JsonSafe<RequestQuery>;
+
+
 export {};
diff --git a/dist/helpers.js b/dist/helpers.js
index b3bd1b2e6f13bc64656cc7ff1af1284f3423b582..5d6e0a814fc39b2468ddc0b221416763cfa981f1 100644
--- a/dist/helpers.js
+++ b/dist/helpers.js
@@ -1,4 +1,4 @@
-import { RequestQuery } from './codegen/tendermint/abci/types.js';
+
 export const typedJson = (typeStr, obj) => {
     return {
         '@type': typeStr,
@@ -14,9 +14,9 @@ export const typeUrlToGrpcPath = (typeUrl) => {
     const { serviceName, methodName } = match.groups;
     return `/${serviceName}.Query/${methodName}`;
 };
-export const toRequestQueryJson = (msg, opts = {}) => RequestQuery.toJSON(RequestQuery.fromPartial({
-    path: typeUrlToGrpcPath(msg.typeUrl),
-    data: msg.value,
-    ...opts,
-}));
+
+
+
+
+
 //# sourceMappingURL=helpers.js.map
\ No newline at end of file
