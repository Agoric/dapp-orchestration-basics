/**
 * @import {AnyJson, JsonSafe} from '@agoric/cosmic-proto';
 * @import {ResponseQuery} from '@agoric/cosmic-proto/tendermint/abci/types.js';
 * @import {InterchainAccountPacketData} from '@agoric/cosmic-proto/ibc/applications/interchain_accounts/v1/packet.js';
 * @import {InterchainQueryPacketData} from '@agoric/cosmic-proto/icq/v1/packet.js';
 */
/**
 * Makes an IBC transaction packet from an array of messages. Expects the `value` of each message
 * to be base64 encoded bytes.
 * Skips checks for malformed messages in favor of interface guards.
 * @param {AnyJson[]} msgs
 * @param {Partial<Omit<TxBody, 'messages'>>} [opts]
 * @returns {string} stringified InterchainAccountPacketData
 * @throws {Error} if malformed messages are provided
 */
export function makeTxPacket(msgs: JsonSafe<Any>[], opts?: Partial<Omit<TxBody, "messages">> | undefined): string;
/**
 * Makes an IBC query packet from an array of query messages. Expects the `data` of each message
 * to be base64 encoded bytes.
 * Skips checks for malformed messages in favor of interface guards.
 * @param {JsonSafe<RequestQuery>[]} msgs
 * @returns {string} stringified InterchainQueryPacketData
 * @throws {Error} if malformed messages are provided
 */
export function makeQueryPacket(msgs: JsonSafe<RequestQuery>[]): string;
/**
 * Looks for a result or error key in the response string, and returns
 * a Base64Bytes string. This string can be decoded using the corresponding
 * Msg*Response object.
 * Error strings seem to be plain text and do not need decoding.
 * @param {string} response
 * @returns {string} - base64 encoded bytes string
 * @throws {Error} if error key is detected in response string, or result key is not found
 */
export function parseTxPacket(response: string): string;
/**
 * Looks for a result or error key in the response string. If a result is found,
 * `responses` is decoded via `CosmosResponse`. The `key` and `value` fields on the
 * resulting entries are base64 encoded for inter-vat communication. These can be
 * decoded using the corresponding Query*Response objects.
 * Error strings seem to be plain text and do not need decoding.
 * @param {string} response
 * @returns {JsonSafe<ResponseQuery>[]}
 * @throws {Error} if error key is detected in response string, or result key is not found
 */
export function parseQueryPacket(response: string): JsonSafe<ResponseQuery>[];
import { Any } from '@agoric/cosmic-proto/google/protobuf/any.js';
import type { JsonSafe } from '@agoric/cosmic-proto';
import { TxBody } from '@agoric/cosmic-proto/cosmos/tx/v1beta1/tx.js';
import { RequestQuery } from '@agoric/cosmic-proto/tendermint/abci/types.js';
import type { ResponseQuery } from '@agoric/cosmic-proto/tendermint/abci/types.js';
//# sourceMappingURL=packet.d.ts.map