export const ICQMsgShape: import("@endo/patterns").Matcher;
export const ICQConnectionI: import("@endo/patterns").InterfaceGuard<{
    getLocalAddress: import("@endo/patterns").MethodGuard;
    getRemoteAddress: import("@endo/patterns").MethodGuard;
    query: import("@endo/patterns").MethodGuard;
}>;
export function prepareICQConnectionKit(zone: Zone): (port: Port) => import("@endo/exo").GuardedKit<{
    connection: {
        getLocalAddress(): `/ibc-port/${string}`;
        getRemoteAddress(): `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`;
        /**
         * @param {JsonSafe<RequestQuery>[]} msgs
         * @returns {Promise<JsonSafe<ResponseQuery>[]>}
         * @throws {Error} if packet fails to send or an error is returned
         */
        query(msgs: JsonSafe<RequestQuery>[]): Promise<JsonSafe<ResponseQuery>[]>;
    };
    connectionHandler: {
        /**
         * @param {Remote<Connection>} connection
         * @param {LocalIbcAddress} localAddr
         * @param {RemoteIbcAddress} remoteAddr
         */
        onOpen(connection: Remote<Connection>, localAddr: `/ibc-port/${string}`, remoteAddr: `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`): Promise<void>;
        onClose(_connection: any, reason: any): Promise<void>;
        onReceive(connection: any, bytes: any): Promise<string>;
    };
}>;
export type ICQConnectionKitState = {
    port: Port;
    connection: Remote<Connection> | undefined;
    localAddress: `/ibc-port/${string}` | undefined;
    remoteAddress: `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}` | undefined;
};
export type ICQConnectionKit = ReturnType<ReturnType<typeof prepareICQConnectionKit>>;
export type ICQConnection = ICQConnectionKit["connection"];
import type { Zone } from '@agoric/base-zone';
import type { Port } from '@agoric/network';
import type { RequestQuery } from '@agoric/cosmic-proto/tendermint/abci/types.js';
import type { JsonSafe } from '@agoric/cosmic-proto';
import type { ResponseQuery } from '@agoric/cosmic-proto/tendermint/abci/types.js';
import type { Connection } from '@agoric/network';
import type { Remote } from '@agoric/vow';
//# sourceMappingURL=icqConnectionKit.d.ts.map