/**
 * @typedef {object} StakingAccountNotification
 * @property {ChainAddress} chainAddress
 */
/**
 * @typedef {{
 *  topicKit: RecorderKit<StakingAccountNotification>;
 *  account: IcaAccount;
 *  chainAddress: ChainAddress;
 *  icqConnection: ICQConnection;
 *  bondDenom: string;
 *  timer: TimerService;
 * }} State
 */
export const IcaAccountHolderI: import("@endo/patterns").InterfaceGuard<{
    getPublicTopics: import("@endo/patterns").MethodGuard;
    getAddress: import("@endo/patterns").MethodGuard;
    getBalance: import("@endo/patterns").MethodGuard;
    delegate: import("@endo/patterns").MethodGuard;
    redelegate: import("@endo/patterns").MethodGuard;
    withdrawReward: import("@endo/patterns").MethodGuard;
    withdrawRewards: import("@endo/patterns").MethodGuard;
    undelegate: import("@endo/patterns").MethodGuard;
}>;
export const trivialDelegateResponse: string;
export function prepareStakingAccountKit(zone: Zone, makeRecorderKit: <T>(storageNode: StorageNode | Awaited<import("@endo/far").FarRef<StorageNode>>, valueShape?: import("@agoric/zoe/src/contractSupport/recorder.js").TypedMatcher<T> | undefined) => RecorderKit<T>, zcf: ZCF): (chainAddress: ChainAddress, bondDenom: string, io: {
    account: IcaAccount;
    storageNode: StorageNode;
    icqConnection: import("@endo/exo").Guarded<{
        getLocalAddress(): `/ibc-port/${string}`;
        getRemoteAddress(): `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`;
        query(msgs: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").RequestQuery>[]): Promise<import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").ResponseQuery>[]>;
    }>;
    timer: TimerService;
}) => import("@endo/exo").GuardedKit<{
    helper: {
        /** @throws if this holder no longer owns the account */
        owned(): IcaAccount;
        getUpdater(): import("@agoric/zoe/src/contractSupport/recorder.js").Recorder<StakingAccountNotification>;
        /**
         * @param {AmountArg} amount
         * @returns {Coin}
         */
        amountToCoin(amount: AmountArg): Coin;
    };
    invitationMakers: {
        /**
         *
         * @param {CosmosValidatorAddress} validator
         * @param {Amount<'nat'>} amount
         */
        Delegate(validator: CosmosValidatorAddress, amount: Amount<"nat">): Promise<Invitation<void, undefined>>;
        /**
         * @param {CosmosValidatorAddress} srcValidator
         * @param {CosmosValidatorAddress} dstValidator
         * @param {AmountArg} amount
         */
        Redelegate(srcValidator: CosmosValidatorAddress, dstValidator: CosmosValidatorAddress, amount: AmountArg): Promise<Invitation<void, undefined>>;
        /** @param {CosmosValidatorAddress} validator */
        WithdrawReward(validator: CosmosValidatorAddress): Promise<Invitation<DenomAmount[], undefined>>;
        /**
         * @param {Delegation[]} delegations
         */
        Undelegate(delegations: Delegation[]): Promise<Invitation<void, undefined>>;
        CloseAccount(): never;
        /**
         * Starting a transfer revokes the account holder. The associated updater
         * will get a special notification that the account is being transferred.
         */
        TransferAccount(): never;
    };
    holder: {
        getPublicTopics(): {
            account: {
                description: string;
                subscriber: globalThis.Subscriber<StakingAccountNotification>;
                storagePath: Promise<string>;
            };
        };
        /** @returns {ChainAddress} */
        getAddress(): ChainAddress;
        /**
         * _Assumes users has already sent funds to their ICA, until #9193
         * @param {CosmosValidatorAddress} validator
         * @param {AmountArg} amount
         */
        delegate(validator: CosmosValidatorAddress, amount: AmountArg): Promise<void>;
        /**
         * _Assumes users has already sent funds to their ICA, until #9193
         * @param {CosmosValidatorAddress} srcValidator
         * @param {CosmosValidatorAddress} dstValidator
         * @param {AmountArg} amount
         */
        redelegate(srcValidator: CosmosValidatorAddress, dstValidator: CosmosValidatorAddress, amount: AmountArg): Promise<void>;
        /**
         * @param {CosmosValidatorAddress} validator
         * @returns {Promise<DenomAmount[]>}
         */
        withdrawReward(validator: CosmosValidatorAddress): Promise<DenomAmount[]>;
        /**
         * @param {DenomAmount['denom']} [denom] - defaults to bondDenom
         * @returns {Promise<DenomAmount>}
         */
        getBalance(denom?: string | undefined): Promise<DenomAmount>;
        withdrawRewards(): never;
        /**
         * @param {Delegation[]} delegations
         */
        undelegate(delegations: Delegation[]): Promise<void>;
    };
}>;
export type StakingAccountNotification = {
    chainAddress: ChainAddress;
};
export type State = {
    topicKit: RecorderKit<StakingAccountNotification>;
    account: IcaAccount;
    chainAddress: ChainAddress;
    icqConnection: import("@endo/exo").Guarded<{
        getLocalAddress(): `/ibc-port/${string}`;
        getRemoteAddress(): `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`;
        query(msgs: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").RequestQuery>[]): Promise<import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").ResponseQuery>[]>;
    }>;
    bondDenom: string;
    timer: TimerService;
};
export type StakingAccountKit = ReturnType<ReturnType<typeof prepareStakingAccountKit>>;
export type StakingAccounHolder = StakingAccountKit["holder"];
import type { Zone } from '@agoric/zone';
import type { RecorderKit } from '@agoric/zoe/src/contractSupport/recorder.js';
import type { ChainAddress } from '../types.js';
import type { IcaAccount } from '../types.js';
import type { TimerService } from '@agoric/time';
import type { AmountArg } from '../types.js';
import type { Coin } from '@agoric/cosmic-proto/cosmos/base/v1beta1/coin.js';
import type { CosmosValidatorAddress } from '../types.js';
import type { DenomAmount } from '../types.js';
import type { Delegation } from '@agoric/cosmic-proto/cosmos/staking/v1beta1/staking.js';
//# sourceMappingURL=stakingAccountKit.d.ts.map