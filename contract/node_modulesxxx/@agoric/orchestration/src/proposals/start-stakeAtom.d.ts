export function startStakeAtom({ consume: { agoricNames, board, chainStorage, chainTimerService, orchestration, startUpgradable, }, installation: { consume: { stakeAtom }, }, instance: { produce: { stakeAtom: produceInstance }, }, }: BootstrapPowers & {
    installation: {
        consume: {
            stakeAtom: Installation<(zcf: ZCF<StakeAtomTerms>, privateArgs: {
                orchestration: import("@endo/exo").Guarded<{
                    makeAccount(hostConnectionId: `connection-${number}`, controllerConnectionId: `connection-${number}`): Promise<import("../cosmos-api.js").IcaAccount>;
                    provideICQConnection(controllerConnectionId: `connection-${number}`): Promise<import("@endo/exo").Guarded<{
                        getLocalAddress(): `/ibc-port/${string}`;
                        getRemoteAddress(): `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`;
                        query(msgs: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").RequestQuery>[]): Promise<import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").ResponseQuery>[]>;
                    }>>;
                }>;
                storageNode: globalThis.StorageNode;
                marshaller: {
                    toCapData: import("@endo/marshal").ToCapData<unknown>;
                    fromCapData: import("@endo/marshal").FromCapData<unknown>;
                    serialize: import("@endo/marshal").ToCapData<unknown>;
                    unserialize: import("@endo/marshal").FromCapData<unknown>;
                };
                timer: import("@agoric/time").TimerService;
            }, baggage: import("@agoric/vat-data").Baggage) => Promise<{
                publicFacet: import("@endo/exo").Guarded<{
                    makeAccount(): Promise<import("@endo/exo").Guarded<{
                        getPublicTopics(): {
                            account: {
                                description: string;
                                subscriber: globalThis.Subscriber<import("../exos/stakingAccountKit.js").StakingAccountNotification>;
                                storagePath: Promise<string>;
                            };
                        };
                        getAddress(): import("../orchestration-api.js").ChainAddress;
                        delegate(validator: import("../cosmos-api.js").CosmosValidatorAddress, amount: import("../orchestration-api.js").AmountArg): Promise<void>;
                        redelegate(srcValidator: import("../cosmos-api.js").CosmosValidatorAddress, dstValidator: import("../cosmos-api.js").CosmosValidatorAddress, amount: import("../orchestration-api.js").AmountArg): Promise<void>;
                        withdrawReward(validator: import("../cosmos-api.js").CosmosValidatorAddress): Promise<import("../orchestration-api.js").DenomAmount[]>;
                        getBalance(denom?: string | undefined): Promise<import("../orchestration-api.js").DenomAmount>;
                        withdrawRewards(): never;
                        undelegate(delegations: import("@agoric/cosmic-proto/cosmos/staking/v1beta1/staking.js").Delegation[]): Promise<void>;
                    }>>;
                    makeAccountInvitationMaker(): Promise<Invitation<{
                        publicSubscribers: {
                            account: {
                                description: string;
                                subscriber: globalThis.Subscriber<import("../exos/stakingAccountKit.js").StakingAccountNotification>;
                                storagePath: Promise<string>;
                            };
                        };
                        invitationMakers: import("@endo/exo").Guarded<{
                            Delegate(validator: import("../cosmos-api.js").CosmosValidatorAddress, amount: Amount<"nat">): Promise<Invitation<void, undefined>>;
                            Redelegate(srcValidator: import("../cosmos-api.js").CosmosValidatorAddress, dstValidator: import("../cosmos-api.js").CosmosValidatorAddress, amount: import("../orchestration-api.js").AmountArg): Promise<Invitation<void, undefined>>;
                            WithdrawReward(validator: import("../cosmos-api.js").CosmosValidatorAddress): Promise<Invitation<import("../orchestration-api.js").DenomAmount[], undefined>>;
                            Undelegate(delegations: import("@agoric/cosmic-proto/cosmos/staking/v1beta1/staking.js").Delegation[]): Promise<Invitation<void, undefined>>;
                            CloseAccount(): never;
                            TransferAccount(): never;
                        }>;
                        account: import("@endo/exo").Guarded<{
                            getPublicTopics(): {
                                account: {
                                    description: string;
                                    subscriber: globalThis.Subscriber<import("../exos/stakingAccountKit.js").StakingAccountNotification>;
                                    storagePath: Promise<string>;
                                };
                            };
                            getAddress(): import("../orchestration-api.js").ChainAddress;
                            delegate(validator: import("../cosmos-api.js").CosmosValidatorAddress, amount: import("../orchestration-api.js").AmountArg): Promise<void>;
                            redelegate(srcValidator: import("../cosmos-api.js").CosmosValidatorAddress, dstValidator: import("../cosmos-api.js").CosmosValidatorAddress, amount: import("../orchestration-api.js").AmountArg): Promise<void>;
                            withdrawReward(validator: import("../cosmos-api.js").CosmosValidatorAddress): Promise<import("../orchestration-api.js").DenomAmount[]>;
                            getBalance(denom?: string | undefined): Promise<import("../orchestration-api.js").DenomAmount>;
                            withdrawRewards(): never;
                            undelegate(delegations: import("@agoric/cosmic-proto/cosmos/staking/v1beta1/staking.js").Delegation[]): Promise<void>;
                        }>;
                    }, undefined>>;
                }>;
            }>>;
        };
    };
}, { options: { hostConnectionId, controllerConnectionId, bondDenom } }: {
    options: StakeAtomTerms;
}): Promise<void>;
export function getManifestForStakeAtom({ restoreRef }: {
    restoreRef: any;
}, { installKeys, ...options }: {
    [x: string]: any;
    installKeys: any;
}): {
    manifest: {
        [x: string]: {
            consume: {
                agoricNames: boolean;
                board: boolean;
                chainStorage: boolean;
                chainTimerService: boolean;
                orchestration: boolean;
                startUpgradable: boolean;
            };
            installation: {
                consume: {
                    stakeAtom: boolean;
                };
            };
            instance: {
                produce: {
                    stakeAtom: boolean;
                };
            };
        };
    };
    installations: {
        stakeAtom: any;
    };
    options: {
        [x: string]: any;
    };
};
import type { StakeAtomTerms } from '../examples/stakeAtom.contract';
//# sourceMappingURL=start-stakeAtom.d.ts.map