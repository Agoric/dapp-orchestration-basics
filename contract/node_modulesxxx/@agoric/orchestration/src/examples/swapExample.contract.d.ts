/**
 * @import {Orchestrator, IcaAccount, CosmosValidatorAddress} from '../types.js'
 * @import {TimerService} from '@agoric/time';
 * @import {LocalChain} from '@agoric/vats/src/localchain.js';
 * @import {Remote} from '@agoric/internal';
 * @import {OrchestrationService} from '../service.js';
 * @import {Zone} from '@agoric/zone';
 */
/** @type {ContractMeta} */
export const meta: ContractMeta;
export function makeNatAmountShape(brand: Brand, min?: bigint | undefined): {
    brand: globalThis.Brand;
    value: import("@endo/patterns").Matcher;
};
export function start(zcf: ZCF, privateArgs: {
    localchain: Remote<import("@endo/exo").Guarded<{
        makeAccount(): Promise<import("@endo/exo").Guarded<{
            getAddress(): Promise<string>;
            getBalance(brand: Brand<"nat">): Promise<import("@agoric/ertp/src/types.js").NatAmount>;
            deposit(payment: Payment<"nat">, optAmountShape?: Pattern): Promise<globalThis.Amount>;
            withdraw(amount: Amount<"nat">): Promise<globalThis.Payment<"nat">>;
            executeTx<MT extends {
                '@type': string;
            }[]>(messages: MT): Promise<{ [K in keyof MT]: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto").ResponseTo<MT[K]>>; }>;
        }>>;
        query(request: import("@agoric/cosmic-proto").TypedJson): Promise<{
            '@type': string;
        }>;
        queryMany(requests: import("@agoric/cosmic-proto").TypedJson[]): Promise<{
            error?: string | undefined;
            reply: {
                '@type': string;
            };
        }[]>;
    }>>;
    orchestrationService: Remote<import("@endo/exo").Guarded<{
        makeAccount(hostConnectionId: `connection-${number}`, controllerConnectionId: `connection-${number}`): Promise<IcaAccount>;
        provideICQConnection(controllerConnectionId: `connection-${number}`): Promise<import("@endo/exo").Guarded<{
            getLocalAddress(): `/ibc-port/${string}`;
            getRemoteAddress(): `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`;
            query(msgs: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").RequestQuery>[]): Promise<import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").ResponseQuery>[]>;
        }>>;
    }>> | null;
    storageNode: Remote<globalThis.StorageNode>;
    timerService: Remote<TimerService> | null;
    zone: Zone;
}): Promise<{
    publicFacet: {
        makeSwapAndStakeInvitation: () => Promise<Invitation<unknown, {
            staked: Amount<"nat">;
            validator: CosmosValidatorAddress;
        }>>;
    } & import("@endo/marshal").RemotableObject<`Alleged: ${string}`> & import("@endo/eventual-send").RemotableBrand<{}, {
        makeSwapAndStakeInvitation: () => Promise<Invitation<unknown, {
            staked: Amount<"nat">;
            validator: CosmosValidatorAddress;
        }>>;
    }>;
}>;
import type { Remote } from '@agoric/internal';
import type { IcaAccount } from '../types.js';
import type { TimerService } from '@agoric/time';
import type { Zone } from '@agoric/zone';
import type { CosmosValidatorAddress } from '../types.js';
//# sourceMappingURL=swapExample.contract.d.ts.map