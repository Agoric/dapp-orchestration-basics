export function start(zcf: ZCF, privateArgs: {
    localchain: Remote<import("@endo/exo").Guarded<{
        makeAccount(): Promise<import("@endo/exo").Guarded<{
            getAddress(): Promise<string>;
            getBalance(brand: Brand<"nat">): Promise<import("@agoric/ertp/src/types.js").NatAmount>;
            deposit(payment: Payment<"nat">, optAmountShape?: Pattern): Promise<globalThis.Amount>;
            withdraw(amount: Amount<"nat">): Promise<globalThis.Payment<"nat">>;
            executeTx<MT extends {
                '@type': string;
            }[]>(messages: MT): Promise<{ [K in keyof MT]: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto").ResponseTo<MT[K]>>; }>;
        }>>;
        query(request: import("@agoric/cosmic-proto").TypedJson): Promise<{
            '@type': string;
        }>;
        queryMany(requests: import("@agoric/cosmic-proto").TypedJson[]): Promise<{
            error?: string | undefined;
            reply: {
                '@type': string;
            };
        }[]>;
    }>>;
    orchestrationService: Remote<import("@endo/exo").Guarded<{
        makeAccount(hostConnectionId: `connection-${number}`, controllerConnectionId: `connection-${number}`): Promise<IcaAccount>;
        provideICQConnection(controllerConnectionId: `connection-${number}`): Promise<import("@endo/exo").Guarded<{
            getLocalAddress(): `/ibc-port/${string}`;
            getRemoteAddress(): `/${string}ibc-port/${string}/ordered/${string}` | `/${string}ibc-port/${string}/unordered/${string}`;
            query(msgs: import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").RequestQuery>[]): Promise<import("@agoric/cosmic-proto").JsonSafe<import("@agoric/cosmic-proto/tendermint/abci/types.js").ResponseQuery>[]>;
        }>>;
    }>>;
    storageNode: Remote<globalThis.StorageNode>;
    timerService: Remote<TimerService>;
}, baggage: Baggage): Promise<{
    publicFacet: {
        makeUnbondAndLiquidStakeInvitation: () => Promise<Invitation<unknown, never>>;
    } & import("@endo/pass-style").RemotableObject<`Alleged: ${string}`> & import("@endo/eventual-send").RemotableBrand<{}, {
        makeUnbondAndLiquidStakeInvitation: () => Promise<Invitation<unknown, never>>;
    }>;
}>;
import type { Remote } from '@agoric/internal';
import type { IcaAccount } from '../types.js';
import type { TimerService } from '@agoric/time';
import type { Baggage } from '@agoric/vat-data';
//# sourceMappingURL=unbondExample.contract.d.ts.map